// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/iiko/clients/iiko.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	models "github.com/kwaaka-team/orders-core/pkg/iiko/models"
)

// MockIIKO is a mock of IIKO interface.
type MockIIKO struct {
	ctrl     *gomock.Controller
	recorder *MockIIKOMockRecorder
}

// MockIIKOMockRecorder is the mock recorder for MockIIKO.
type MockIIKOMockRecorder struct {
	mock *MockIIKO
}

// NewMockIIKO creates a new mock instance.
func NewMockIIKO(ctrl *gomock.Controller) *MockIIKO {
	mock := &MockIIKO{ctrl: ctrl}
	mock.recorder = &MockIIKOMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIIKO) EXPECT() *MockIIKOMockRecorder {
	return m.recorder
}

// AddOrderItem mocks base method.
func (m *MockIIKO) AddOrderItem(ctx context.Context, req models.OrderItem) (models.OrderItemResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddOrderItem", ctx, req)
	ret0, _ := ret[0].(models.OrderItemResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddOrderItem indicates an expected call of AddOrderItem.
func (mr *MockIIKOMockRecorder) AddOrderItem(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddOrderItem", reflect.TypeOf((*MockIIKO)(nil).AddOrderItem), ctx, req)
}

// Auth mocks base method.
func (m *MockIIKO) Auth(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Auth", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Auth indicates an expected call of Auth.
func (mr *MockIIKOMockRecorder) Auth(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Auth", reflect.TypeOf((*MockIIKO)(nil).Auth), ctx)
}

// AwakeTerminal mocks base method.
func (m *MockIIKO) AwakeTerminal(ctx context.Context, req models.IsAliveRequest) (models.AwakeResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AwakeTerminal", ctx, req)
	ret0, _ := ret[0].(models.AwakeResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AwakeTerminal indicates an expected call of AwakeTerminal.
func (mr *MockIIKOMockRecorder) AwakeTerminal(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AwakeTerminal", reflect.TypeOf((*MockIIKO)(nil).AwakeTerminal), ctx, req)
}

// CancelDeliveryOrder mocks base method.
func (m *MockIIKO) CancelDeliveryOrder(ctx context.Context, organizationID, orderID, removalTypeId string) (models.CorID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CancelDeliveryOrder", ctx, organizationID, orderID, removalTypeId)
	ret0, _ := ret[0].(models.CorID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CancelDeliveryOrder indicates an expected call of CancelDeliveryOrder.
func (mr *MockIIKOMockRecorder) CancelDeliveryOrder(ctx, organizationID, orderID, removalTypeId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CancelDeliveryOrder", reflect.TypeOf((*MockIIKO)(nil).CancelDeliveryOrder), ctx, organizationID, orderID, removalTypeId)
}

// Close mocks base method.
func (m *MockIIKO) Close(ctx context.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Close", ctx)
}

// Close indicates an expected call of Close.
func (mr *MockIIKOMockRecorder) Close(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockIIKO)(nil).Close), ctx)
}

// CloseOrder mocks base method.
func (m *MockIIKO) CloseOrder(ctx context.Context, posOrderId, organizationId string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloseOrder", ctx, posOrderId, organizationId)
	ret0, _ := ret[0].(error)
	return ret0
}

// CloseOrder indicates an expected call of CloseOrder.
func (mr *MockIIKOMockRecorder) CloseOrder(ctx, posOrderId, organizationId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseOrder", reflect.TypeOf((*MockIIKO)(nil).CloseOrder), ctx, posOrderId, organizationId)
}

// CreateDeliveryOrder mocks base method.
func (m *MockIIKO) CreateDeliveryOrder(ctx context.Context, req models.CreateDeliveryRequest) (models.CreateDeliveryResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateDeliveryOrder", ctx, req)
	ret0, _ := ret[0].(models.CreateDeliveryResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateDeliveryOrder indicates an expected call of CreateDeliveryOrder.
func (mr *MockIIKOMockRecorder) CreateDeliveryOrder(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDeliveryOrder", reflect.TypeOf((*MockIIKO)(nil).CreateDeliveryOrder), ctx, req)
}

// CreateTableOrder mocks base method.
func (m *MockIIKO) CreateTableOrder(ctx context.Context, req models.CreateDeliveryRequest) (models.CreateDeliveryResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTableOrder", ctx, req)
	ret0, _ := ret[0].(models.CreateDeliveryResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateTableOrder indicates an expected call of CreateTableOrder.
func (mr *MockIIKOMockRecorder) CreateTableOrder(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTableOrder", reflect.TypeOf((*MockIIKO)(nil).CreateTableOrder), ctx, req)
}

// GetCombos mocks base method.
func (m *MockIIKO) GetCombos(ctx context.Context, req models.GetCombosRequest) (models.GetCombosResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCombos", ctx, req)
	ret0, _ := ret[0].(models.GetCombosResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCombos indicates an expected call of GetCombos.
func (mr *MockIIKOMockRecorder) GetCombos(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCombos", reflect.TypeOf((*MockIIKO)(nil).GetCombos), ctx, req)
}

// GetCustomerInfo mocks base method.
func (m *MockIIKO) GetCustomerInfo(ctx context.Context, req models.GetCustomerInfoRequest) (models.GetCustomerInfoResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCustomerInfo", ctx, req)
	ret0, _ := ret[0].(models.GetCustomerInfoResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCustomerInfo indicates an expected call of GetCustomerInfo.
func (mr *MockIIKOMockRecorder) GetCustomerInfo(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCustomerInfo", reflect.TypeOf((*MockIIKO)(nil).GetCustomerInfo), ctx, req)
}

// GetCustomerTransactions mocks base method.
func (m *MockIIKO) GetCustomerTransactions(ctx context.Context, req models.GetTransactionInfoReq) (models.GetTransactionInfoResp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCustomerTransactions", ctx, req)
	ret0, _ := ret[0].(models.GetTransactionInfoResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCustomerTransactions indicates an expected call of GetCustomerTransactions.
func (mr *MockIIKOMockRecorder) GetCustomerTransactions(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCustomerTransactions", reflect.TypeOf((*MockIIKO)(nil).GetCustomerTransactions), ctx, req)
}

// GetDiscounts mocks base method.
func (m *MockIIKO) GetDiscounts(ctx context.Context, organizationID string) (models.StoreDiscountsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDiscounts", ctx, organizationID)
	ret0, _ := ret[0].(models.StoreDiscountsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDiscounts indicates an expected call of GetDiscounts.
func (mr *MockIIKOMockRecorder) GetDiscounts(ctx, organizationID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDiscounts", reflect.TypeOf((*MockIIKO)(nil).GetDiscounts), ctx, organizationID)
}

// GetExternalMenu mocks base method.
func (m *MockIIKO) GetExternalMenu(ctx context.Context, organizationID, externalMenuID, priceCategoryId string) (models.GetExternalMenuResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetExternalMenu", ctx, organizationID, externalMenuID, priceCategoryId)
	ret0, _ := ret[0].(models.GetExternalMenuResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetExternalMenu indicates an expected call of GetExternalMenu.
func (mr *MockIIKOMockRecorder) GetExternalMenu(ctx, organizationID, externalMenuID, priceCategoryId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetExternalMenu", reflect.TypeOf((*MockIIKO)(nil).GetExternalMenu), ctx, organizationID, externalMenuID, priceCategoryId)
}

// GetMenu mocks base method.
func (m *MockIIKO) GetMenu(ctx context.Context, organizationID string) (models.GetMenuResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMenu", ctx, organizationID)
	ret0, _ := ret[0].(models.GetMenuResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMenu indicates an expected call of GetMenu.
func (mr *MockIIKOMockRecorder) GetMenu(ctx, organizationID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMenu", reflect.TypeOf((*MockIIKO)(nil).GetMenu), ctx, organizationID)
}

// GetOrderTypes mocks base method.
func (m *MockIIKO) GetOrderTypes(ctx context.Context, req models.OrderTypesRequest) (models.OrderTypesResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrderTypes", ctx, req)
	ret0, _ := ret[0].(models.OrderTypesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrderTypes indicates an expected call of GetOrderTypes.
func (mr *MockIIKOMockRecorder) GetOrderTypes(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrderTypes", reflect.TypeOf((*MockIIKO)(nil).GetOrderTypes), ctx, req)
}

// GetOrdersByIDs mocks base method.
func (m *MockIIKO) GetOrdersByIDs(ctx context.Context, req models.GetOrdersByIDsRequest) (models.OrdersByTablesResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrdersByIDs", ctx, req)
	ret0, _ := ret[0].(models.OrdersByTablesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrdersByIDs indicates an expected call of GetOrdersByIDs.
func (mr *MockIIKOMockRecorder) GetOrdersByIDs(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrdersByIDs", reflect.TypeOf((*MockIIKO)(nil).GetOrdersByIDs), ctx, req)
}

// GetOrdersByTables mocks base method.
func (m *MockIIKO) GetOrdersByTables(ctx context.Context, req models.OrdersByTablesRequest) (models.OrdersByTablesResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrdersByTables", ctx, req)
	ret0, _ := ret[0].(models.OrdersByTablesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrdersByTables indicates an expected call of GetOrdersByTables.
func (mr *MockIIKOMockRecorder) GetOrdersByTables(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrdersByTables", reflect.TypeOf((*MockIIKO)(nil).GetOrdersByTables), ctx, req)
}

// GetOrganizations mocks base method.
func (m *MockIIKO) GetOrganizations(ctx context.Context) ([]models.Info, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrganizations", ctx)
	ret0, _ := ret[0].([]models.Info)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrganizations indicates an expected call of GetOrganizations.
func (mr *MockIIKOMockRecorder) GetOrganizations(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrganizations", reflect.TypeOf((*MockIIKO)(nil).GetOrganizations), ctx)
}

// GetStopList mocks base method.
func (m *MockIIKO) GetStopList(ctx context.Context, req models.StopListRequest) (models.StopListResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStopList", ctx, req)
	ret0, _ := ret[0].(models.StopListResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStopList indicates an expected call of GetStopList.
func (mr *MockIIKOMockRecorder) GetStopList(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStopList", reflect.TypeOf((*MockIIKO)(nil).GetStopList), ctx, req)
}

// GetTables mocks base method.
func (m *MockIIKO) GetTables(ctx context.Context, req models.TableRequest) (models.TableResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTables", ctx, req)
	ret0, _ := ret[0].(models.TableResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTables indicates an expected call of GetTables.
func (mr *MockIIKOMockRecorder) GetTables(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTables", reflect.TypeOf((*MockIIKO)(nil).GetTables), ctx, req)
}

// GetTerminalGroups mocks base method.
func (m *MockIIKO) GetTerminalGroups(ctx context.Context, organizationID string) (models.TerminalGroupsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTerminalGroups", ctx, organizationID)
	ret0, _ := ret[0].(models.TerminalGroupsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTerminalGroups indicates an expected call of GetTerminalGroups.
func (mr *MockIIKOMockRecorder) GetTerminalGroups(ctx, organizationID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTerminalGroups", reflect.TypeOf((*MockIIKO)(nil).GetTerminalGroups), ctx, organizationID)
}

// GetWebhookSetting mocks base method.
func (m *MockIIKO) GetWebhookSetting(ctx context.Context, organizationID string) (models.GetWebhookSettingResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWebhookSetting", ctx, organizationID)
	ret0, _ := ret[0].(models.GetWebhookSettingResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWebhookSetting indicates an expected call of GetWebhookSetting.
func (mr *MockIIKOMockRecorder) GetWebhookSetting(ctx, organizationID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWebhookSetting", reflect.TypeOf((*MockIIKO)(nil).GetWebhookSetting), ctx, organizationID)
}

// IsAlive mocks base method.
func (m *MockIIKO) IsAlive(ctx context.Context, req models.IsAliveRequest) (models.IsAliveResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsAlive", ctx, req)
	ret0, _ := ret[0].(models.IsAliveResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsAlive indicates an expected call of IsAlive.
func (mr *MockIIKOMockRecorder) IsAlive(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsAlive", reflect.TypeOf((*MockIIKO)(nil).IsAlive), ctx, req)
}

// RetrieveDeliveryOrder mocks base method.
func (m *MockIIKO) RetrieveDeliveryOrder(ctx context.Context, organizationID, orderID string) (models.RetrieveOrder, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RetrieveDeliveryOrder", ctx, organizationID, orderID)
	ret0, _ := ret[0].(models.RetrieveOrder)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RetrieveDeliveryOrder indicates an expected call of RetrieveDeliveryOrder.
func (mr *MockIIKOMockRecorder) RetrieveDeliveryOrder(ctx, organizationID, orderID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RetrieveDeliveryOrder", reflect.TypeOf((*MockIIKO)(nil).RetrieveDeliveryOrder), ctx, organizationID, orderID)
}

// SendNotification mocks base method.
func (m *MockIIKO) SendNotification(ctx context.Context, notificationInfo models.SendNotificationRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendNotification", ctx, notificationInfo)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendNotification indicates an expected call of SendNotification.
func (mr *MockIIKOMockRecorder) SendNotification(ctx, notificationInfo interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendNotification", reflect.TypeOf((*MockIIKO)(nil).SendNotification), ctx, notificationInfo)
}

// UpdateOrderProblem mocks base method.
func (m *MockIIKO) UpdateOrderProblem(ctx context.Context, problem models.UpdateOrderProblem) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateOrderProblem", ctx, problem)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateOrderProblem indicates an expected call of UpdateOrderProblem.
func (mr *MockIIKOMockRecorder) UpdateOrderProblem(ctx, problem interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateOrderProblem", reflect.TypeOf((*MockIIKO)(nil).UpdateOrderProblem), ctx, problem)
}

// UpdateWebhookSetting mocks base method.
func (m *MockIIKO) UpdateWebhookSetting(ctx context.Context, request models.UpdateWebhookRequest) (models.CorID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateWebhookSetting", ctx, request)
	ret0, _ := ret[0].(models.CorID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateWebhookSetting indicates an expected call of UpdateWebhookSetting.
func (mr *MockIIKOMockRecorder) UpdateWebhookSetting(ctx, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateWebhookSetting", reflect.TypeOf((*MockIIKO)(nil).UpdateWebhookSetting), ctx, request)
}

// AddOrdersPayment mocks base method.
func (m *MockIIKO) AddOrdersPayment(ctx context.Context, req models.ChangePaymentReq) (string, error){
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddOrdersPayment", ctx, req)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddOrdersPayment indicates an expected call of AddOrdersPayment.
func(mr *MockIIKOMockRecorder)AddOrdersPayment(ctx context.Context, req interface{}) *gomock.Call{
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddOrdersPayment", reflect.TypeOf((*MockIIKO)(nil).AddOrdersPayment), ctx, req)
}

// CloseTableOrder mocks base method.
func (m *MockIIKO) CloseTableOrder(ctx context.Context, req models.CloseTableOrderReq) (string, error){
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloseTableOrder", ctx, req)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CloseTableOrder indicates an expected call of CloseTableOrder.
func(mr *MockIIKOMockRecorder)CloseTableOrder(ctx context.Context, req interface{}) *gomock.Call{
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseTableOrder", reflect.TypeOf((*MockIIKO)(nil).CloseTableOrder), ctx, req)
}

// GetCommandStatus mocks base method.
func (m *MockIIKO) GetCommandStatus(ctx context.Context, req models.GetCommandStatusReq) error{
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCommandStatus", ctx, req)
	ret0, _ := ret[0].(error)
	return  ret0
}

// GetCommandStatus indicates an expected call of GetCommandStatus.
func(mr *MockIIKOMockRecorder)GetCommandStatus(ctx context.Context, req interface{}) *gomock.Call{
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCommandStatus", reflect.TypeOf((*MockIIKO)(nil).GetCommandStatus), ctx, req)
}