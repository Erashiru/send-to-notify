// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/clients/rkeeper.go

// Package mock_clients is a generated GoMock package.
package mock_clients

import (
	context "context"
	dto2 "github.com/kwaaka-team/orders-core/pkg/rkeeperwhite/clients/dto"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockRKeeper is a mock of RKeeper interface.
type MockRKeeper struct {
	ctrl     *gomock.Controller
	recorder *MockRKeeperMockRecorder
}

// MockRKeeperMockRecorder is the mock recorder for MockRKeeper.
type MockRKeeperMockRecorder struct {
	mock *MockRKeeper
}

// NewMockRKeeper creates a new mock instance.
func NewMockRKeeper(ctrl *gomock.Controller) *MockRKeeper {
	mock := &MockRKeeper{ctrl: ctrl}
	mock.recorder = &MockRKeeperMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRKeeper) EXPECT() *MockRKeeperMockRecorder {
	return m.recorder
}

// CancelOrder mocks base method.
func (m *MockRKeeper) CancelOrder(ctx context.Context, objectID int, orderGUID string) (dto2.SyncResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CancelOrder", ctx, objectID, orderGUID)
	ret0, _ := ret[0].(dto2.SyncResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CancelOrder indicates an expected call of CancelOrder.
func (mr *MockRKeeperMockRecorder) CancelOrder(ctx, objectID, orderGUID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CancelOrder", reflect.TypeOf((*MockRKeeper)(nil).CancelOrder), ctx, objectID, orderGUID)
}

// CancelOrderTask mocks base method.
func (m *MockRKeeper) CancelOrderTask(ctx context.Context, taskGUID string) (dto2.CancelOrderResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CancelOrderTask", ctx, taskGUID)
	ret0, _ := ret[0].(dto2.CancelOrderResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CancelOrderTask indicates an expected call of CancelOrderTask.
func (mr *MockRKeeperMockRecorder) CancelOrderTask(ctx, taskGUID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CancelOrderTask", reflect.TypeOf((*MockRKeeper)(nil).CancelOrderTask), ctx, taskGUID)
}

// CreateOrder mocks base method.
func (m *MockRKeeper) CreateOrder(ctx context.Context, objectID int, order dto2.Order) (dto2.SyncResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrder", ctx, objectID, order)
	ret0, _ := ret[0].(dto2.SyncResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateOrder indicates an expected call of CreateOrder.
func (mr *MockRKeeperMockRecorder) CreateOrder(ctx, objectID, order interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrder", reflect.TypeOf((*MockRKeeper)(nil).CreateOrder), ctx, objectID, order)
}

// CreateOrderTask mocks base method.
func (m *MockRKeeper) CreateOrderTask(ctx context.Context, taskGUID string) (dto2.CreateOrderTaskResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrderTask", ctx, taskGUID)
	ret0, _ := ret[0].(dto2.CreateOrderTaskResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateOrderTask indicates an expected call of CreateOrderTask.
func (mr *MockRKeeperMockRecorder) CreateOrderTask(ctx, taskGUID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrderTask", reflect.TypeOf((*MockRKeeper)(nil).CreateOrderTask), ctx, taskGUID)
}

// GetMenu mocks base method.
func (m *MockRKeeper) GetMenu(ctx context.Context, objectId int) (dto2.MenuResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMenu", ctx, objectId)
	ret0, _ := ret[0].(dto2.MenuResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMenu indicates an expected call of GetMenu.
func (mr *MockRKeeperMockRecorder) GetMenu(ctx, objectId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMenu", reflect.TypeOf((*MockRKeeper)(nil).GetMenu), ctx, objectId)
}

// GetOrder mocks base method.
func (m *MockRKeeper) GetOrder(ctx context.Context, orderGUID string, objectID int) (dto2.SyncResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrder", ctx, orderGUID, objectID)
	ret0, _ := ret[0].(dto2.SyncResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrder indicates an expected call of GetOrder.
func (mr *MockRKeeperMockRecorder) GetOrder(ctx, orderGUID, objectID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrder", reflect.TypeOf((*MockRKeeper)(nil).GetOrder), ctx, orderGUID, objectID)
}

// GetOrderTask mocks base method.
func (m *MockRKeeper) GetOrderTask(ctx context.Context, taskGUID string) (dto2.GetOrderTaskResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrderTask", ctx, taskGUID)
	ret0, _ := ret[0].(dto2.GetOrderTaskResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrderTask indicates an expected call of GetOrderTask.
func (mr *MockRKeeperMockRecorder) GetOrderTask(ctx, taskGUID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrderTask", reflect.TypeOf((*MockRKeeper)(nil).GetOrderTask), ctx, taskGUID)
}

// GetStopList mocks base method.
func (m *MockRKeeper) GetStopList(ctx context.Context, objectId int) (dto2.StopListResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStopList", ctx, objectId)
	ret0, _ := ret[0].(dto2.StopListResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStopList indicates an expected call of GetStopList.
func (mr *MockRKeeperMockRecorder) GetStopList(ctx, objectId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStopList", reflect.TypeOf((*MockRKeeper)(nil).GetStopList), ctx, objectId)
}
