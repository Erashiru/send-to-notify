// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/clients/glovo.go

// Package mock_clients is a generated GoMock package.
package mock_clients

import (
	context "context"
	"github.com/kwaaka-team/orders-core/core/glovo/models"
	dto2 "github.com/kwaaka-team/orders-core/pkg/glovo/clients/dto"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockGlovo is a mock of Glovo interface.
type MockGlovo struct {
	ctrl     *gomock.Controller
	recorder *MockGlovoMockRecorder
}

// MockGlovoMockRecorder is the mock recorder for MockGlovo.
type MockGlovoMockRecorder struct {
	mock *MockGlovo
}

// NewMockGlovo creates a new mock instance.
func NewMockGlovo(ctrl *gomock.Controller) *MockGlovo {
	mock := &MockGlovo{ctrl: ctrl}
	mock.recorder = &MockGlovoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGlovo) EXPECT() *MockGlovoMockRecorder {
	return m.recorder
}

// BulkUpdate mocks base method.
func (m *MockGlovo) BulkUpdate(ctx context.Context, storeId string, request dto2.BulkUpdateRequest) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BulkUpdate", ctx, storeId, request)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BulkUpdate indicates an expected call of BulkUpdate.
func (mr *MockGlovoMockRecorder) BulkUpdate(ctx, storeId, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BulkUpdate", reflect.TypeOf((*MockGlovo)(nil).BulkUpdate), ctx, storeId, request)
}

// ModifyAttribute mocks base method.
func (m *MockGlovo) ModifyAttribute(ctx context.Context, req dto2.AttributeModifyRequest) (dto2.AttributeModifyResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ModifyAttribute", ctx, req)
	ret0, _ := ret[0].(dto2.AttributeModifyResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ModifyAttribute indicates an expected call of ModifyAttribute.
func (mr *MockGlovoMockRecorder) ModifyAttribute(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ModifyAttribute", reflect.TypeOf((*MockGlovo)(nil).ModifyAttribute), ctx, req)
}

// ModifyOrderProduct mocks base method.
func (m *MockGlovo) ModifyOrderProduct(ctx context.Context, order models.ModifyOrderProductRequest) (*models.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ModifyOrderProduct", ctx, order)
	ret0, _ := ret[0].(*models.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ModifyOrderProduct indicates an expected call of ModifyOrderProduct.
func (mr *MockGlovoMockRecorder) ModifyOrderProduct(ctx, order interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ModifyOrderProduct", reflect.TypeOf((*MockGlovo)(nil).ModifyOrderProduct), ctx, order)
}

// ModifyProduct mocks base method.
func (m *MockGlovo) ModifyProduct(ctx context.Context, req dto2.ProductModifyRequest) (dto2.ProductModifyResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ModifyProduct", ctx, req)
	ret0, _ := ret[0].(dto2.ProductModifyResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ModifyProduct indicates an expected call of ModifyProduct.
func (mr *MockGlovoMockRecorder) ModifyProduct(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ModifyProduct", reflect.TypeOf((*MockGlovo)(nil).ModifyProduct), ctx, req)
}

// UpdateOrderStatus mocks base method.
func (m *MockGlovo) UpdateOrderStatus(ctx context.Context, order dto2.OrderUpdateRequest) (dto2.OrderUpdateResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateOrderStatus", ctx, order)
	ret0, _ := ret[0].(dto2.OrderUpdateResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateOrderStatus indicates an expected call of UpdateOrderStatus.
func (mr *MockGlovoMockRecorder) UpdateOrderStatus(ctx, order interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateOrderStatus", reflect.TypeOf((*MockGlovo)(nil).UpdateOrderStatus), ctx, order)
}

// UploadMenu mocks base method.
func (m *MockGlovo) UploadMenu(ctx context.Context, req dto2.UploadMenuRequest) (dto2.UploadMenuResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UploadMenu", ctx, req)
	ret0, _ := ret[0].(dto2.UploadMenuResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UploadMenu indicates an expected call of UploadMenu.
func (mr *MockGlovoMockRecorder) UploadMenu(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UploadMenu", reflect.TypeOf((*MockGlovo)(nil).UploadMenu), ctx, req)
}

// ValidateMenu mocks base method.
func (m *MockGlovo) ValidateMenu(ctx context.Context, req dto2.ValidateMenuRequest) (dto2.ValidateMenuResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateMenu", ctx, req)
	ret0, _ := ret[0].(dto2.ValidateMenuResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ValidateMenu indicates an expected call of ValidateMenu.
func (mr *MockGlovoMockRecorder) ValidateMenu(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateMenu", reflect.TypeOf((*MockGlovo)(nil).ValidateMenu), ctx, req)
}

// VerifyMenu mocks base method.
func (m *MockGlovo) VerifyMenu(ctx context.Context, storeId, trxId string) (dto2.UploadMenuResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VerifyMenu", ctx, storeId, trxId)
	ret0, _ := ret[0].(dto2.UploadMenuResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VerifyMenu indicates an expected call of VerifyMenu.
func (mr *MockGlovoMockRecorder) VerifyMenu(ctx, storeId, trxId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VerifyMenu", reflect.TypeOf((*MockGlovo)(nil).VerifyMenu), ctx, storeId, trxId)
}
