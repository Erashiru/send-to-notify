// Code generated by MockGen. DO NOT EDIT.
// Source: clients/bk.go

// Package mock_clients is a generated GoMock package.
package mock_clients

import (
	context "context"
	models2 "github.com/kwaaka-team/orders-core/pkg/burgerking/clients/models"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockBK is a mock of BK interface.
type MockBK struct {
	ctrl     *gomock.Controller
	recorder *MockBKMockRecorder
}

// MockBKMockRecorder is the mock recorder for MockBK.
type MockBKMockRecorder struct {
	mock *MockBK
}

// NewMockBK creates a new mock instance.
func NewMockBK(ctrl *gomock.Controller) *MockBK {
	mock := &MockBK{ctrl: ctrl}
	mock.recorder = &MockBKMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBK) EXPECT() *MockBKMockRecorder {
	return m.recorder
}

// CancelOrder mocks base method.
func (m *MockBK) CancelOrder(ctx context.Context, order models2.CancelOrderRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CancelOrder", ctx, order)
	ret0, _ := ret[0].(error)
	return ret0
}

// CancelOrder indicates an expected call of CancelOrder.
func (mr *MockBKMockRecorder) CancelOrder(ctx, order interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CancelOrder", reflect.TypeOf((*MockBK)(nil).CancelOrder), ctx, order)
}

// DeleteClosing mocks base method.
func (m *MockBK) DeleteClosing(ctx context.Context, storeID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteClosing", ctx, storeID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteClosing indicates an expected call of DeleteClosing.
func (mr *MockBKMockRecorder) DeleteClosing(ctx, storeID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteClosing", reflect.TypeOf((*MockBK)(nil).DeleteClosing), ctx, storeID)
}

// GetClosing mocks base method.
func (m *MockBK) GetClosing(ctx context.Context, storeID string) (models2.ClosingResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetClosing", ctx, storeID)
	ret0, _ := ret[0].(models2.ClosingResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetClosing indicates an expected call of GetClosing.
func (mr *MockBKMockRecorder) GetClosing(ctx, storeID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClosing", reflect.TypeOf((*MockBK)(nil).GetClosing), ctx, storeID)
}

// SendMenu mocks base method.
func (m *MockBK) SendMenu(ctx context.Context, req models2.SendMenuRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendMenu", ctx, req)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMenu indicates an expected call of SendMenu.
func (mr *MockBKMockRecorder) SendMenu(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMenu", reflect.TypeOf((*MockBK)(nil).SendMenu), ctx, req)
}

// SendOrder mocks base method.
func (m *MockBK) SendOrder(ctx context.Context, order models2.Order) (models2.OrderResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendOrder", ctx, order)
	ret0, _ := ret[0].(models2.OrderResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SendOrder indicates an expected call of SendOrder.
func (mr *MockBKMockRecorder) SendOrder(ctx, order interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendOrder", reflect.TypeOf((*MockBK)(nil).SendOrder), ctx, order)
}

// SetSchedule mocks base method.
func (m *MockBK) SetSchedule(ctx context.Context, storeID string, req models2.SetScheduleRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetSchedule", ctx, storeID, req)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetSchedule indicates an expected call of SetSchedule.
func (mr *MockBKMockRecorder) SetSchedule(ctx, storeID, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetSchedule", reflect.TypeOf((*MockBK)(nil).SetSchedule), ctx, storeID, req)
}

// StopLists mocks base method.
func (m *MockBK) StopLists(ctx context.Context, req models2.StopListRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StopLists", ctx, req)
	ret0, _ := ret[0].(error)
	return ret0
}

// StopLists indicates an expected call of StopLists.
func (mr *MockBKMockRecorder) StopLists(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StopLists", reflect.TypeOf((*MockBK)(nil).StopLists), ctx, req)
}

// UpdateClosing mocks base method.
func (m *MockBK) UpdateClosing(ctx context.Context, storeID string) (models2.ClosingResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateClosing", ctx, storeID)
	ret0, _ := ret[0].(models2.ClosingResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateClosing indicates an expected call of UpdateClosing.
func (mr *MockBKMockRecorder) UpdateClosing(ctx, storeID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateClosing", reflect.TypeOf((*MockBK)(nil).UpdateClosing), ctx, storeID)
}
