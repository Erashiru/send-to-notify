// Code generated by mockery v2.38.0. DO NOT EDIT.

package mocks

import (
	context "context"

	dto "github.com/kwaaka-team/orders-core/pkg/order/dto"
	mock "github.com/stretchr/testify/mock"

	coreModels "github.com/kwaaka-team/orders-core/core/models"
	models "github.com/kwaaka-team/orders-core/core/models"

	mongo "go.mongodb.org/mongo-driver/mongo"
)

// Client is an autogenerated mock type for the Client type
type Client struct {
	mock.Mock
}

// AddOrderItems provides a mock function with given fields: ctx, req
func (_m *Client) AddOrderItems(ctx context.Context, req models.Order) error {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for AddOrderItems")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, models.Order) error); ok {
		r0 = rf(ctx, req)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CancelOrder provides a mock function with given fields: ctx, _a1
func (_m *Client) CancelOrder(ctx context.Context, _a1 coreModels.CancelOrder) error {
	ret := _m.Called(ctx, _a1)

	if len(ret) == 0 {
		panic("no return value specified for CancelOrder")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, coreModels.CancelOrder) error); ok {
		r0 = rf(ctx, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CancelOrderInPos provides a mock function with given fields: ctx, _a1
func (_m *Client) CancelOrderInPos(ctx context.Context, _a1 coreModels.CancelOrderInPos) error {
	ret := _m.Called(ctx, _a1)

	if len(ret) == 0 {
		panic("no return value specified for CancelOrderInPos")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, coreModels.CancelOrderInPos) error); ok {
		r0 = rf(ctx, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Client provides a mock function with given fields:
func (_m *Client) Client() *mongo.Client {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Client")
	}

	var r0 *mongo.Client
	if rf, ok := ret.Get(0).(func() *mongo.Client); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*mongo.Client)
		}
	}

	return r0
}

// Close provides a mock function with given fields: ctx
func (_m *Client) Close(ctx context.Context) error {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Close")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateOrderInDB provides a mock function with given fields: ctx, req
func (_m *Client) CreateOrderInDB(ctx context.Context, req models.Order) (models.Order, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for CreateOrderInDB")
	}

	var r0 models.Order
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, models.Order) (models.Order, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, models.Order) models.Order); ok {
		r0 = rf(ctx, req)
	} else {
		r0 = ret.Get(0).(models.Order)
	}

	if rf, ok := ret.Get(1).(func(context.Context, models.Order) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateOrderInPOS provides a mock function with given fields: ctx, req
func (_m *Client) CreateOrderInPOS(ctx context.Context, req models.Order) (models.Order, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for CreateOrderInPOS")
	}

	var r0 models.Order
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, models.Order) (models.Order, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, models.Order) models.Order); ok {
		r0 = rf(ctx, req)
	} else {
		r0 = ret.Get(0).(models.Order)
	}

	if rf, ok := ret.Get(1).(func(context.Context, models.Order) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetActiveOrders provides a mock function with given fields: ctx, query
func (_m *Client) GetActiveOrders(ctx context.Context, query dto.ActiveOrderSelector) ([]models.Order, error) {
	ret := _m.Called(ctx, query)

	if len(ret) == 0 {
		panic("no return value specified for GetActiveOrders")
	}

	var r0 []models.Order
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, dto.ActiveOrderSelector) ([]models.Order, error)); ok {
		return rf(ctx, query)
	}
	if rf, ok := ret.Get(0).(func(context.Context, dto.ActiveOrderSelector) []models.Order); ok {
		r0 = rf(ctx, query)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Order)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, dto.ActiveOrderSelector) error); ok {
		r1 = rf(ctx, query)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
// GetActivePreorders provides a mock function with given fields: ctx, query
func (_m *Client) GetActivePreorders(ctx context.Context, query dto.ActiveOrderSelector) ([]models.Order, error) {
	ret := _m.Called(ctx, query)

	if len(ret) == 0 {
		panic("no return value specified for GetActivePreorders")
	}

	var r0 []models.Order
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, dto.ActiveOrderSelector) ([]models.Order, error)); ok {
		return rf(ctx, query)
	}
	if rf, ok := ret.Get(0).(func(context.Context, dto.ActiveOrderSelector) []models.Order); ok {
		r0 = rf(ctx, query)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Order)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, dto.ActiveOrderSelector) error); ok {
		r1 = rf(ctx, query)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAllOrders provides a mock function with given fields: ctx, query
func (_m *Client) GetAllOrders(ctx context.Context, query dto.OrderSelector) ([]models.Order, error) {
	ret := _m.Called(ctx, query)

	if len(ret) == 0 {
		panic("no return value specified for GetAllOrders")
	}

	var r0 []models.Order
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, dto.OrderSelector) ([]models.Order, error)); ok {
		return rf(ctx, query)
	}
	if rf, ok := ret.Get(0).(func(context.Context, dto.OrderSelector) []models.Order); ok {
		r0 = rf(ctx, query)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Order)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, dto.OrderSelector) error); ok {
		r1 = rf(ctx, query)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetOrder provides a mock function with given fields: ctx, _a1
func (_m *Client) GetOrder(ctx context.Context, _a1 dto.OrderSelector) (models.Order, error) {
	ret := _m.Called(ctx, _a1)

	if len(ret) == 0 {
		panic("no return value specified for GetOrder")
	}

	var r0 models.Order
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, dto.OrderSelector) (models.Order, error)); ok {
		return rf(ctx, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, dto.OrderSelector) models.Order); ok {
		r0 = rf(ctx, _a1)
	} else {
		r0 = ret.Get(0).(models.Order)
	}

	if rf, ok := ret.Get(1).(func(context.Context, dto.OrderSelector) error); ok {
		r1 = rf(ctx, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetOrderStatus provides a mock function with given fields: ctx, orderID
func (_m *Client) GetOrderStatus(ctx context.Context, orderID string) (models.Order, error) {
	ret := _m.Called(ctx, orderID)

	if len(ret) == 0 {
		panic("no return value specified for GetOrderStatus")
	}

	var r0 models.Order
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (models.Order, error)); ok {
		return rf(ctx, orderID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) models.Order); ok {
		r0 = rf(ctx, orderID)
	} else {
		r0 = ret.Get(0).(models.Order)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, orderID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetOrdersWithFilters provides a mock function with given fields: ctx, query
func (_m *Client) GetOrdersWithFilters(ctx context.Context, query dto.OrderSelector) ([]models.Order, int, error) {
	ret := _m.Called(ctx, query)

	if len(ret) == 0 {
		panic("no return value specified for GetOrdersWithFilters")
	}

	var r0 []models.Order
	var r1 int
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, dto.OrderSelector) ([]models.Order, int, error)); ok {
		return rf(ctx, query)
	}
	if rf, ok := ret.Get(0).(func(context.Context, dto.OrderSelector) []models.Order); ok {
		r0 = rf(ctx, query)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Order)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, dto.OrderSelector) int); ok {
		r1 = rf(ctx, query)
	} else {
		r1 = ret.Get(1).(int)
	}

	if rf, ok := ret.Get(2).(func(context.Context, dto.OrderSelector) error); ok {
		r2 = rf(ctx, query)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// ManualUpdateStatus provides a mock function with given fields: ctx, req
func (_m *Client) ManualUpdateStatus(ctx context.Context, req models.Order) error {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for ManualUpdateStatus")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, models.Order) error); ok {
		r0 = rf(ctx, req)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SetPaidStatus provides a mock function with given fields: ctx, orderID
func (_m *Client) SetPaidStatus(ctx context.Context, orderID string) error {
	ret := _m.Called(ctx, orderID)

	if len(ret) == 0 {
		panic("no return value specified for SetPaidStatus")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, orderID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateOrder provides a mock function with given fields: ctx, _a1
func (_m *Client) UpdateOrder(ctx context.Context, _a1 models.Order) error {
	ret := _m.Called(ctx, _a1)

	if len(ret) == 0 {
		panic("no return value specified for UpdateOrder")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, models.Order) error); ok {
		r0 = rf(ctx, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateOrderModel provides a mock function with given fields: ctx, query, _a2
func (_m *Client) UpdateOrderModel(ctx context.Context, query dto.OrderSelector, _a2 dto.UpdateOrder) error {
	ret := _m.Called(ctx, query, _a2)

	if len(ret) == 0 {
		panic("no return value specified for UpdateOrderModel")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, dto.OrderSelector, dto.UpdateOrder) error); ok {
		r0 = rf(ctx, query, _a2)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateOrderStatus provides a mock function with given fields: ctx, posOrderID, pos, status, errorDescription
func (_m *Client) UpdateOrderStatus(ctx context.Context, posOrderID string, pos string, status string, errorDescription string) error {
	ret := _m.Called(ctx, posOrderID, pos, status, errorDescription)

	if len(ret) == 0 {
		panic("no return value specified for UpdateOrderStatus")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, string) error); ok {
		r0 = rf(ctx, posOrderID, pos, status, errorDescription)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateOrderStatusByID provides a mock function with given fields: ctx, orderID, pos, status
func (_m *Client) UpdateOrderStatusByID(ctx context.Context, orderID string, pos string, status string) error {
	ret := _m.Called(ctx, orderID, pos, status)

	if len(ret) == 0 {
		panic("no return value specified for UpdateOrderStatusByID")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) error); ok {
		r0 = rf(ctx, orderID, pos, status)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateOrderStatusInDS provides a mock function with given fields: ctx, orderID, posStatus
func (_m *Client) UpdateOrderStatusInDS(ctx context.Context, orderID string, posStatus dto.PosStatus) error {
	ret := _m.Called(ctx, orderID, posStatus)

	if len(ret) == 0 {
		panic("no return value specified for UpdateOrderStatusInDS")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, dto.PosStatus) error); ok {
		r0 = rf(ctx, orderID, posStatus)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewClient creates a new instance of Client. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *Client {
	mock := &Client{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
