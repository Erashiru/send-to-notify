// Code generated by mockery v2.42.0. DO NOT EDIT.

package mocks

import (
	models "github.com/kwaaka-team/orders-core/core/models"
	pos "github.com/kwaaka-team/orders-core/service/pos"
	mock "github.com/stretchr/testify/mock"

	storecoremodels "github.com/kwaaka-team/orders-core/core/storecore/models"
)

// Factory is an autogenerated mock type for the Factory type
type Factory struct {
	mock.Mock
}

// GetPosService provides a mock function with given fields: posType, store
func (_m *Factory) GetPosService(posType models.Pos, store storecoremodels.Store) (pos.Service, error) {
	ret := _m.Called(posType, store)

	if len(ret) == 0 {
		panic("no return value specified for GetPosService")
	}

	var r0 pos.Service
	var r1 error
	if rf, ok := ret.Get(0).(func(models.Pos, storecoremodels.Store) (pos.Service, error)); ok {
		return rf(posType, store)
	}
	if rf, ok := ret.Get(0).(func(models.Pos, storecoremodels.Store) pos.Service); ok {
		r0 = rf(posType, store)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(pos.Service)
		}
	}

	if rf, ok := ret.Get(1).(func(models.Pos, storecoremodels.Store) error); ok {
		r1 = rf(posType, store)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewFactory creates a new instance of Factory. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewFactory(t interface {
	mock.TestingT
	Cleanup(func())
}) *Factory {
	mock := &Factory{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
