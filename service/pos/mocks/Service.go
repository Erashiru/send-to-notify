// Code generated by mockery v2.42.0. DO NOT EDIT.

package mocks

import (
	context "context"

	config "github.com/kwaaka-team/orders-core/core/config"

	drivers "github.com/kwaaka-team/orders-core/core/database/drivers"

	menu "github.com/kwaaka-team/orders-core/pkg/menu"

	menumodels "github.com/kwaaka-team/orders-core/core/menu/models"

	mock "github.com/stretchr/testify/mock"

	models "github.com/kwaaka-team/orders-core/core/models"

	store "github.com/kwaaka-team/orders-core/pkg/store"

	storecoremodels "github.com/kwaaka-team/orders-core/core/storecore/models"
)

// Service is an autogenerated mock type for the Service type
type Service struct {
	mock.Mock
}

// CreateOrder provides a mock function with given fields: ctx, order, globalConfig, ds, _a4, _a5, menuClient, aggregatorMenu, storeCli
func (_m *Service) CreateOrder(ctx context.Context, order models.Order, globalConfig config.Configuration, ds drivers.DataStore, _a4 storecoremodels.Store, _a5 menumodels.Menu, menuClient menu.Client, aggregatorMenu menumodels.Menu, storeCli store.Client) (models.Order, error) {
	ret := _m.Called(ctx, order, globalConfig, ds, _a4, _a5, menuClient, aggregatorMenu, storeCli)

	if len(ret) == 0 {
		panic("no return value specified for CreateOrder")
	}

	var r0 models.Order
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, models.Order, config.Configuration, drivers.DataStore, storecoremodels.Store, menumodels.Menu, menu.Client, menumodels.Menu, store.Client) (models.Order, error)); ok {
		return rf(ctx, order, globalConfig, ds, _a4, _a5, menuClient, aggregatorMenu, storeCli)
	}
	if rf, ok := ret.Get(0).(func(context.Context, models.Order, config.Configuration, drivers.DataStore, storecoremodels.Store, menumodels.Menu, menu.Client, menumodels.Menu, store.Client) models.Order); ok {
		r0 = rf(ctx, order, globalConfig, ds, _a4, _a5, menuClient, aggregatorMenu, storeCli)
	} else {
		r0 = ret.Get(0).(models.Order)
	}

	if rf, ok := ret.Get(1).(func(context.Context, models.Order, config.Configuration, drivers.DataStore, storecoremodels.Store, menumodels.Menu, menu.Client, menumodels.Menu, store.Client) error); ok {
		r1 = rf(ctx, order, globalConfig, ds, _a4, _a5, menuClient, aggregatorMenu, storeCli)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetMenu provides a mock function with given fields: ctx, _a1
func (_m *Service) GetMenu(ctx context.Context, _a1 storecoremodels.Store) (menumodels.Menu, error) {
	ret := _m.Called(ctx, _a1)

	if len(ret) == 0 {
		panic("no return value specified for GetMenu")
	}

	var r0 menumodels.Menu
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, storecoremodels.Store) (menumodels.Menu, error)); ok {
		return rf(ctx, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, storecoremodels.Store) menumodels.Menu); ok {
		r0 = rf(ctx, _a1)
	} else {
		r0 = ret.Get(0).(menumodels.Menu)
	}

	if rf, ok := ret.Get(1).(func(context.Context, storecoremodels.Store) error); ok {
		r1 = rf(ctx, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetOrderStatus provides a mock function with given fields: ctx, order
func (_m *Service) GetOrderStatus(ctx context.Context, order models.Order) (string, error) {
	ret := _m.Called(ctx, order)

	if len(ret) == 0 {
		panic("no return value specified for GetOrderStatus")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, models.Order) (string, error)); ok {
		return rf(ctx, order)
	}
	if rf, ok := ret.Get(0).(func(context.Context, models.Order) string); ok {
		r0 = rf(ctx, order)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, models.Order) error); ok {
		r1 = rf(ctx, order)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetStopList provides a mock function with given fields: ctx
func (_m *Service) GetStopList(ctx context.Context) (menumodels.StopListItems, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetStopList")
	}

	var r0 menumodels.StopListItems
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (menumodels.StopListItems, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) menumodels.StopListItems); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(menumodels.StopListItems)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IsAliveStatus provides a mock function with given fields: ctx, _a1
func (_m *Service) IsAliveStatus(ctx context.Context, _a1 storecoremodels.Store) (bool, error) {
	ret := _m.Called(ctx, _a1)

	if len(ret) == 0 {
		panic("no return value specified for IsAliveStatus")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, storecoremodels.Store) (bool, error)); ok {
		return rf(ctx, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, storecoremodels.Store) bool); ok {
		r0 = rf(ctx, _a1)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, storecoremodels.Store) error); ok {
		r1 = rf(ctx, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MapPosStatusToSystemStatus provides a mock function with given fields: posStatus, currentSystemStatus
func (_m *Service) MapPosStatusToSystemStatus(posStatus string, currentSystemStatus string) (models.PosStatus, error) {
	ret := _m.Called(posStatus, currentSystemStatus)

	if len(ret) == 0 {
		panic("no return value specified for MapPosStatusToSystemStatus")
	}

	var r0 models.PosStatus
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string) (models.PosStatus, error)); ok {
		return rf(posStatus, currentSystemStatus)
	}
	if rf, ok := ret.Get(0).(func(string, string) models.PosStatus); ok {
		r0 = rf(posStatus, currentSystemStatus)
	} else {
		r0 = ret.Get(0).(models.PosStatus)
	}

	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(posStatus, currentSystemStatus)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewService creates a new instance of Service. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewService(t interface {
	mock.TestingT
	Cleanup(func())
}) *Service {
	mock := &Service{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
