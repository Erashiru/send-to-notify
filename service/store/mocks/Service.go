// Code generated by mockery v2.42.1. DO NOT EDIT.

package mocks

import (
	context "context"

	dto "github.com/kwaaka-team/orders-core/core/integration_api/resources/v1/dto"
	coremodels "github.com/kwaaka-team/orders-core/core/models"

	mock "github.com/stretchr/testify/mock"

	models "github.com/kwaaka-team/orders-core/core/kwaaka_admin/models"

	selector "github.com/kwaaka-team/orders-core/core/storecore/managers/selector"

	storecoremodels "github.com/kwaaka-team/orders-core/core/storecore/models"
)

// Service is an autogenerated mock type for the Service type
type Service struct {
	mock.Mock
}

// AddMenuObjectToMenus provides a mock function with given fields: ctx, storeId, deliveryService, menuId
func (_m *Service) AddMenuObjectToMenus(ctx context.Context, storeId string, deliveryService string, menuId string) error {
	ret := _m.Called(ctx, storeId, deliveryService, menuId)

	if len(ret) == 0 {
		panic("no return value specified for AddMenuObjectToMenus")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) error); ok {
		r0 = rf(ctx, storeId, deliveryService, menuId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreatePolygon provides a mock function with given fields: ctx, request
func (_m *Service) CreatePolygon(ctx context.Context, request models.PolygonRequest) error {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for CreatePolygon")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, models.PolygonRequest) error); ok {
		r0 = rf(ctx, request)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateStorePhoneEmail provides a mock function with given fields: ctx, restaurantID, request
func (_m *Service) CreateStorePhoneEmail(ctx context.Context, restaurantID string, request models.StorePhoneEmail) error {
	ret := _m.Called(ctx, restaurantID, request)

	if len(ret) == 0 {
		panic("no return value specified for CreateStorePhoneEmail")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, models.StorePhoneEmail) error); ok {
		r0 = rf(ctx, restaurantID, request)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FindAllStores provides a mock function with given fields: ctx
func (_m *Service) FindAllStores(ctx context.Context) ([]storecoremodels.Store, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for FindAllStores")
	}

	var r0 []storecoremodels.Store
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]storecoremodels.Store, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []storecoremodels.Store); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]storecoremodels.Store)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindStoresByDeliveryService provides a mock function with given fields: ctx, deliveryService
func (_m *Service) FindStoresByDeliveryService(ctx context.Context, deliveryService string) ([]storecoremodels.Store, error) {
	ret := _m.Called(ctx, deliveryService)

	if len(ret) == 0 {
		panic("no return value specified for FindStoresByDeliveryService")
	}

	var r0 []storecoremodels.Store
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) ([]storecoremodels.Store, error)); ok {
		return rf(ctx, deliveryService)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) []storecoremodels.Store); ok {
		r0 = rf(ctx, deliveryService)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]storecoremodels.Store)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, deliveryService)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindStoresByPosType provides a mock function with given fields: ctx, posType
func (_m *Service) FindStoresByPosType(ctx context.Context, posType string) ([]storecoremodels.Store, error) {
	ret := _m.Called(ctx, posType)

	if len(ret) == 0 {
		panic("no return value specified for FindStoresByPosType")
	}

	var r0 []storecoremodels.Store
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) ([]storecoremodels.Store, error)); ok {
		return rf(ctx, posType)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) []storecoremodels.Store); ok {
		r0 = rf(ctx, posType)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]storecoremodels.Store)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, posType)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByExternalIdAndDeliveryService provides a mock function with given fields: ctx, externalStoreID, deliveryService
func (_m *Service) GetByExternalIdAndDeliveryService(ctx context.Context, externalStoreID string, deliveryService string) (storecoremodels.Store, error) {
	ret := _m.Called(ctx, externalStoreID, deliveryService)

	if len(ret) == 0 {
		panic("no return value specified for GetByExternalIdAndDeliveryService")
	}

	var r0 storecoremodels.Store
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (storecoremodels.Store, error)); ok {
		return rf(ctx, externalStoreID, deliveryService)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) storecoremodels.Store); ok {
		r0 = rf(ctx, externalStoreID, deliveryService)
	} else {
		r0 = ret.Get(0).(storecoremodels.Store)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, externalStoreID, deliveryService)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByID provides a mock function with given fields: ctx, storeID
func (_m *Service) GetByID(ctx context.Context, storeID string) (storecoremodels.Store, error) {
	ret := _m.Called(ctx, storeID)

	if len(ret) == 0 {
		panic("no return value specified for GetByID")
	}

	var r0 storecoremodels.Store
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (storecoremodels.Store, error)); ok {
		return rf(ctx, storeID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) storecoremodels.Store); ok {
		r0 = rf(ctx, storeID)
	} else {
		r0 = ret.Get(0).(storecoremodels.Store)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, storeID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByYarosRestaurantID provides a mock function with given fields: ctx, restaurantID
func (_m *Service) GetByYarosRestaurantID(ctx context.Context, restaurantID string) (storecoremodels.Store, error) {
	ret := _m.Called(ctx, restaurantID)

	if len(ret) == 0 {
		panic("no return value specified for GetByYarosRestaurantID")
	}

	var r0 storecoremodels.Store
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (storecoremodels.Store, error)); ok {
		return rf(ctx, restaurantID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) storecoremodels.Store); ok {
		r0 = rf(ctx, restaurantID)
	} else {
		r0 = ret.Get(0).(storecoremodels.Store)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, restaurantID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetOrderCodePrefix provides a mock function with given fields: ctx, _a1, deliveryService
func (_m *Service) GetOrderCodePrefix(ctx context.Context, _a1 storecoremodels.Store, deliveryService string) (string, error) {
	ret := _m.Called(ctx, _a1, deliveryService)

	if len(ret) == 0 {
		panic("no return value specified for GetOrderCodePrefix")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, storecoremodels.Store, string) (string, error)); ok {
		return rf(ctx, _a1, deliveryService)
	}
	if rf, ok := ret.Get(0).(func(context.Context, storecoremodels.Store, string) string); ok {
		r0 = rf(ctx, _a1, deliveryService)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, storecoremodels.Store, string) error); ok {
		r1 = rf(ctx, _a1, deliveryService)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPaymentTypes provides a mock function with given fields: _a0, deliveryService, paymentInfo
func (_m *Service) GetPaymentTypes(_a0 storecoremodels.Store, deliveryService string, paymentInfo coremodels.PosPaymentInfo) (storecoremodels.DeliveryServicePaymentType, error) {
	ret := _m.Called(_a0, deliveryService, paymentInfo)

	if len(ret) == 0 {
		panic("no return value specified for GetPaymentTypes")
	}

	var r0 storecoremodels.DeliveryServicePaymentType
	var r1 error
	if rf, ok := ret.Get(0).(func(storecoremodels.Store, string, coremodels.PosPaymentInfo) (storecoremodels.DeliveryServicePaymentType, error)); ok {
		return rf(_a0, deliveryService, paymentInfo)
	}
	if rf, ok := ret.Get(0).(func(storecoremodels.Store, string, coremodels.PosPaymentInfo) storecoremodels.DeliveryServicePaymentType); ok {
		r0 = rf(_a0, deliveryService, paymentInfo)
	} else {
		r0 = ret.Get(0).(storecoremodels.DeliveryServicePaymentType)
	}

	if rf, ok := ret.Get(1).(func(storecoremodels.Store, string, coremodels.PosPaymentInfo) error); ok {
		r1 = rf(_a0, deliveryService, paymentInfo)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPolygonByRestaurantID provides a mock function with given fields: ctx, restaurantID
func (_m *Service) GetPolygonByRestaurantID(ctx context.Context, restaurantID string) (models.GetPolygonResponse, error) {
	ret := _m.Called(ctx, restaurantID)

	if len(ret) == 0 {
		panic("no return value specified for GetPolygonByRestaurantID")
	}

	var r0 models.GetPolygonResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (models.GetPolygonResponse, error)); ok {
		return rf(ctx, restaurantID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) models.GetPolygonResponse); ok {
		r0 = rf(ctx, restaurantID)
	} else {
		r0 = ret.Get(0).(models.GetPolygonResponse)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, restaurantID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetRestaurantsByGroupId provides a mock function with given fields: ctx, pagination, restId
func (_m *Service) GetRestaurantsByGroupId(ctx context.Context, pagination selector.Pagination, restId string) ([]storecoremodels.Store, error) {
	ret := _m.Called(ctx, pagination, restId)

	if len(ret) == 0 {
		panic("no return value specified for GetRestaurantsByGroupId")
	}

	var r0 []storecoremodels.Store
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, selector.Pagination, string) ([]storecoremodels.Store, error)); ok {
		return rf(ctx, pagination, restId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, selector.Pagination, string) []storecoremodels.Store); ok {
		r0 = rf(ctx, pagination, restId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]storecoremodels.Store)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, selector.Pagination, string) error); ok {
		r1 = rf(ctx, pagination, restId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetStoreExternalIds provides a mock function with given fields: _a0, deliveryService
func (_m *Service) GetStoreExternalIds(_a0 storecoremodels.Store, deliveryService string) ([]string, error) {
	ret := _m.Called(_a0, deliveryService)

	if len(ret) == 0 {
		panic("no return value specified for GetStoreExternalIds")
	}

	var r0 []string
	var r1 error
	if rf, ok := ret.Get(0).(func(storecoremodels.Store, string) ([]string, error)); ok {
		return rf(_a0, deliveryService)
	}
	if rf, ok := ret.Get(0).(func(storecoremodels.Store, string) []string); ok {
		r0 = rf(_a0, deliveryService)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	if rf, ok := ret.Get(1).(func(storecoremodels.Store, string) error); ok {
		r1 = rf(_a0, deliveryService)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetStoresByIIKOOrganizationId provides a mock function with given fields: ctx, organizationId
func (_m *Service) GetStoresByIIKOOrganizationId(ctx context.Context, organizationId string) ([]storecoremodels.Store, error) {
	ret := _m.Called(ctx, organizationId)

	if len(ret) == 0 {
		panic("no return value specified for GetStoresByIIKOOrganizationId")
	}

	var r0 []storecoremodels.Store
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) ([]storecoremodels.Store, error)); ok {
		return rf(ctx, organizationId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) []storecoremodels.Store); ok {
		r0 = rf(ctx, organizationId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]storecoremodels.Store)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, organizationId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetStoresBySelectorFilter provides a mock function with given fields: ctx, query
func (_m *Service) GetStoresBySelectorFilter(ctx context.Context, query selector.Store) ([]storecoremodels.Store, error) {
	ret := _m.Called(ctx, query)

	if len(ret) == 0 {
		panic("no return value specified for GetStoresBySelectorFilter")
	}

	var r0 []storecoremodels.Store
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, selector.Store) ([]storecoremodels.Store, error)); ok {
		return rf(ctx, query)
	}
	if rf, ok := ret.Get(0).(func(context.Context, selector.Store) []storecoremodels.Store); ok {
		r0 = rf(ctx, query)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]storecoremodels.Store)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, selector.Store) error); ok {
		r1 = rf(ctx, query)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetStoresByStoreGroupID provides a mock function with given fields: ctx, storeGroupID
func (_m *Service) GetStoresByStoreGroupID(ctx context.Context, storeGroupID string) ([]storecoremodels.Store, error) {
	ret := _m.Called(ctx, storeGroupID)

	if len(ret) == 0 {
		panic("no return value specified for GetStoresByStoreGroupID")
	}

	var r0 []storecoremodels.Store
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) ([]storecoremodels.Store, error)); ok {
		return rf(ctx, storeGroupID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) []storecoremodels.Store); ok {
		r0 = rf(ctx, storeGroupID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]storecoremodels.Store)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, storeGroupID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetStoresByToken provides a mock function with given fields: ctx, token
func (_m *Service) GetStoresByToken(ctx context.Context, token string) ([]storecoremodels.Store, error) {
	ret := _m.Called(ctx, token)

	if len(ret) == 0 {
		panic("no return value specified for GetStoresByToken")
	}

	var r0 []storecoremodels.Store
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) ([]storecoremodels.Store, error)); ok {
		return rf(ctx, token)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) []storecoremodels.Store); ok {
		r0 = rf(ctx, token)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]storecoremodels.Store)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, token)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetStoresByWppPhoneNum provides a mock function with given fields: ctx, phoneNum
func (_m *Service) GetStoresByWppPhoneNum(ctx context.Context, phoneNum string) ([]storecoremodels.Store, error) {
	ret := _m.Called(ctx, phoneNum)

	if len(ret) == 0 {
		panic("no return value specified for GetStoresByWppPhoneNum")
	}

	var r0 []storecoremodels.Store
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) ([]storecoremodels.Store, error)); ok {
		return rf(ctx, phoneNum)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) []storecoremodels.Store); ok {
		r0 = rf(ctx, phoneNum)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]storecoremodels.Store)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, phoneNum)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetStoresInRestGroupByName provides a mock function with given fields: ctx, restaurantGroupId, name, legalEntities
func (_m *Service) GetStoresInRestGroupByName(ctx context.Context, restaurantGroupId string, name string, legalEntities []string) ([]storecoremodels.Store, error) {
	ret := _m.Called(ctx, restaurantGroupId, name, legalEntities)

	if len(ret) == 0 {
		panic("no return value specified for GetStoresInRestGroupByName")
	}

	var r0 []storecoremodels.Store
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, []string) ([]storecoremodels.Store, error)); ok {
		return rf(ctx, restaurantGroupId, name, legalEntities)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, []string) []storecoremodels.Store); ok {
		r0 = rf(ctx, restaurantGroupId, name, legalEntities)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]storecoremodels.Store)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, []string) error); ok {
		r1 = rf(ctx, restaurantGroupId, name, legalEntities)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTwoGisReviewLink provides a mock function with given fields: ctx, restaurantID
func (_m *Service) GetTwoGisReviewLink(ctx context.Context, restaurantID string) (string, error) {
	ret := _m.Called(ctx, restaurantID)

	if len(ret) == 0 {
		panic("no return value specified for GetTwoGisReviewLink")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (string, error)); ok {
		return rf(ctx, restaurantID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) string); ok {
		r0 = rf(ctx, restaurantID)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, restaurantID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IgnoreStatusUpdate provides a mock function with given fields: _a0, deliveryService
func (_m *Service) IgnoreStatusUpdate(_a0 storecoremodels.Store, deliveryService string) (bool, error) {
	ret := _m.Called(_a0, deliveryService)

	if len(ret) == 0 {
		panic("no return value specified for IgnoreStatusUpdate")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(storecoremodels.Store, string) (bool, error)); ok {
		return rf(_a0, deliveryService)
	}
	if rf, ok := ret.Get(0).(func(storecoremodels.Store, string) bool); ok {
		r0 = rf(_a0, deliveryService)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(storecoremodels.Store, string) error); ok {
		r1 = rf(_a0, deliveryService)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IsAutoAccept provides a mock function with given fields: _a0, deliveryService
func (_m *Service) IsAutoAccept(_a0 storecoremodels.Store, deliveryService string) (bool, error) {
	ret := _m.Called(_a0, deliveryService)

	if len(ret) == 0 {
		panic("no return value specified for IsAutoAccept")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(storecoremodels.Store, string) (bool, error)); ok {
		return rf(_a0, deliveryService)
	}
	if rf, ok := ret.Get(0).(func(storecoremodels.Store, string) bool); ok {
		r0 = rf(_a0, deliveryService)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(storecoremodels.Store, string) error); ok {
		r1 = rf(_a0, deliveryService)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IsMarketplace provides a mock function with given fields: _a0, deliveryService
func (_m *Service) IsMarketplace(_a0 storecoremodels.Store, deliveryService string) (bool, error) {
	ret := _m.Called(_a0, deliveryService)

	if len(ret) == 0 {
		panic("no return value specified for IsMarketplace")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(storecoremodels.Store, string) (bool, error)); ok {
		return rf(_a0, deliveryService)
	}
	if rf, ok := ret.Get(0).(func(storecoremodels.Store, string) bool); ok {
		r0 = rf(_a0, deliveryService)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(storecoremodels.Store, string) error); ok {
		r1 = rf(_a0, deliveryService)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IsSecretValid provides a mock function with given fields: _a0, deliveryService, secret
func (_m *Service) IsSecretValid(_a0 storecoremodels.Store, deliveryService string, secret string) (bool, error) {
	ret := _m.Called(_a0, deliveryService, secret)

	if len(ret) == 0 {
		panic("no return value specified for IsSecretValid")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(storecoremodels.Store, string, string) (bool, error)); ok {
		return rf(_a0, deliveryService, secret)
	}
	if rf, ok := ret.Get(0).(func(storecoremodels.Store, string, string) bool); ok {
		r0 = rf(_a0, deliveryService, secret)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(storecoremodels.Store, string, string) error); ok {
		r1 = rf(_a0, deliveryService, secret)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IsSendToPos provides a mock function with given fields: _a0, deliveryService
func (_m *Service) IsSendToPos(_a0 storecoremodels.Store, deliveryService string) (bool, error) {
	ret := _m.Called(_a0, deliveryService)

	if len(ret) == 0 {
		panic("no return value specified for IsSendToPos")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(storecoremodels.Store, string) (bool, error)); ok {
		return rf(_a0, deliveryService)
	}
	if rf, ok := ret.Get(0).(func(storecoremodels.Store, string) bool); ok {
		r0 = rf(_a0, deliveryService)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(storecoremodels.Store, string) error); ok {
		r1 = rf(_a0, deliveryService)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SetActualRkeeper7xmlSeqNumber provides a mock function with given fields: ctx, storeID, seqNumber
func (_m *Service) SetActualRkeeper7xmlSeqNumber(ctx context.Context, storeID string, seqNumber string) error {
	ret := _m.Called(ctx, storeID, seqNumber)

	if len(ret) == 0 {
		panic("no return value specified for SetActualRkeeper7xmlSeqNumber")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, storeID, seqNumber)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateKwaakaAdminBusyMode provides a mock function with given fields: ctx, req
func (_m *Service) UpdateKwaakaAdminBusyMode(ctx context.Context, req []dto.BusyModeRequest) error {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for UpdateKwaakaAdminBusyMode")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, []dto.BusyModeRequest) error); ok {
		r0 = rf(ctx, req)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateMenuId provides a mock function with given fields: ctx, storeId, menuId
func (_m *Service) UpdateMenuId(ctx context.Context, storeId string, menuId string) error {
	ret := _m.Called(ctx, storeId, menuId)

	if len(ret) == 0 {
		panic("no return value specified for UpdateMenuId")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, storeId, menuId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdatePolygon provides a mock function with given fields: ctx, request
func (_m *Service) UpdatePolygon(ctx context.Context, request models.PolygonRequest) error {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for UpdatePolygon")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, models.PolygonRequest) error); ok {
		r0 = rf(ctx, request)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateStoreByFields provides a mock function with given fields: ctx, req
func (_m *Service) UpdateStoreByFields(ctx context.Context, req storecoremodels.UpdateStore) error {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for UpdateStoreByFields")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, storecoremodels.UpdateStore) error); ok {
		r0 = rf(ctx, req)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateStoreSchedule provides a mock function with given fields: ctx, req
func (_m *Service) UpdateStoreSchedule(ctx context.Context, req storecoremodels.UpdateStoreSchedule) error {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for UpdateStoreSchedule")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, storecoremodels.UpdateStoreSchedule) error); ok {
		r0 = rf(ctx, req)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewService creates a new instance of Service. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewService(t interface {
	mock.TestingT
	Cleanup(func())
}) *Service {
	mock := &Service{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
