// Code generated by mockery v2.42.2. DO NOT EDIT.

package mocks

import (
	context "context"

	legalentitymodels "github.com/kwaaka-team/orders-core/service/legalentity/models"
	mock "github.com/stretchr/testify/mock"

	models "github.com/kwaaka-team/orders-core/core/storecore/models"

	selector "github.com/kwaaka-team/orders-core/core/storecore/managers/selector"
)

// Repository is an autogenerated mock type for the Repository type
type Repository struct {
	mock.Mock
}

// CreateStoreGroup provides a mock function with given fields: ctx, group
func (_m *Repository) CreateStoreGroup(ctx context.Context, group models.StoreGroup) (string, error) {
	ret := _m.Called(ctx, group)

	if len(ret) == 0 {
		panic("no return value specified for CreateStoreGroup")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, models.StoreGroup) (string, error)); ok {
		return rf(ctx, group)
	}
	if rf, ok := ret.Get(0).(func(context.Context, models.StoreGroup) string); ok {
		r0 = rf(ctx, group)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, models.StoreGroup) error); ok {
		r1 = rf(ctx, group)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAllStoreGroupsIdsAndNames provides a mock function with given fields: ctx
func (_m *Repository) GetAllStoreGroupsIdsAndNames(ctx context.Context) ([]models.StoreGroupIdAndName, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetAllStoreGroupsIdsAndNames")
	}

	var r0 []models.StoreGroupIdAndName
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]models.StoreGroupIdAndName, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []models.StoreGroupIdAndName); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.StoreGroupIdAndName)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetStoreGroupByID provides a mock function with given fields: ctx, storeGroupID
func (_m *Repository) GetStoreGroupByID(ctx context.Context, storeGroupID string) (models.StoreGroup, error) {
	ret := _m.Called(ctx, storeGroupID)

	if len(ret) == 0 {
		panic("no return value specified for GetStoreGroupByID")
	}

	var r0 models.StoreGroup
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (models.StoreGroup, error)); ok {
		return rf(ctx, storeGroupID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) models.StoreGroup); ok {
		r0 = rf(ctx, storeGroupID)
	} else {
		r0 = ret.Get(0).(models.StoreGroup)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, storeGroupID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetStoreGroupByStoreID provides a mock function with given fields: ctx, storeID
func (_m *Repository) GetStoreGroupByStoreID(ctx context.Context, storeID string) (models.StoreGroup, error) {
	ret := _m.Called(ctx, storeID)

	if len(ret) == 0 {
		panic("no return value specified for GetStoreGroupByStoreID")
	}

	var r0 models.StoreGroup
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (models.StoreGroup, error)); ok {
		return rf(ctx, storeID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) models.StoreGroup); ok {
		r0 = rf(ctx, storeID)
	} else {
		r0 = ret.Get(0).(models.StoreGroup)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, storeID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetStoreGroupLegalEntities provides a mock function with given fields: ctx, id
func (_m *Repository) GetStoreGroupLegalEntities(ctx context.Context, id string) ([]legalentitymodels.LegalEntityView, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetStoreGroupLegalEntities")
	}

	var r0 []legalentitymodels.LegalEntityView
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) ([]legalentitymodels.LegalEntityView, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) []legalentitymodels.LegalEntityView); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]legalentitymodels.LegalEntityView)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetStoreGroupsWithFilter provides a mock function with given fields: ctx, query
func (_m *Repository) GetStoreGroupsWithFilter(ctx context.Context, query selector.StoreGroup) ([]models.StoreGroup, error) {
	ret := _m.Called(ctx, query)

	if len(ret) == 0 {
		panic("no return value specified for GetStoreGroupsWithFilter")
	}

	var r0 []models.StoreGroup
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, selector.StoreGroup) ([]models.StoreGroup, error)); ok {
		return rf(ctx, query)
	}
	if rf, ok := ret.Get(0).(func(context.Context, selector.StoreGroup) []models.StoreGroup); ok {
		r0 = rf(ctx, query)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.StoreGroup)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, selector.StoreGroup) error); ok {
		r1 = rf(ctx, query)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateStoreGroup provides a mock function with given fields: ctx, group
func (_m *Repository) UpdateStoreGroup(ctx context.Context, group models.UpdateStoreGroup) error {
	ret := _m.Called(ctx, group)

	if len(ret) == 0 {
		panic("no return value specified for UpdateStoreGroup")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, models.UpdateStoreGroup) error); ok {
		r0 = rf(ctx, group)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewRepository creates a new instance of Repository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *Repository {
	mock := &Repository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
