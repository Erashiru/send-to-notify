// Code generated by mockery v2.42.0. DO NOT EDIT.

package mocks

import (
	aggregator "github.com/kwaaka-team/orders-core/service/aggregator"
	mock "github.com/stretchr/testify/mock"

	models "github.com/kwaaka-team/orders-core/core/storecore/models"
)

// Factory is an autogenerated mock type for the Factory type
type Factory struct {
	mock.Mock
}

// GetAggregator provides a mock function with given fields: aggName, store
func (_m *Factory) GetAggregator(aggName string, store models.Store) (aggregator.Aggregator, error) {
	ret := _m.Called(aggName, store)

	if len(ret) == 0 {
		panic("no return value specified for GetAggregator")
	}

	var r0 aggregator.Aggregator
	var r1 error
	if rf, ok := ret.Get(0).(func(string, models.Store) (aggregator.Aggregator, error)); ok {
		return rf(aggName, store)
	}
	if rf, ok := ret.Get(0).(func(string, models.Store) aggregator.Aggregator); ok {
		r0 = rf(aggName, store)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(aggregator.Aggregator)
		}
	}

	if rf, ok := ret.Get(1).(func(string, models.Store) error); ok {
		r1 = rf(aggName, store)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewFactory creates a new instance of Factory. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewFactory(t interface {
	mock.TestingT
	Cleanup(func())
}) *Factory {
	mock := &Factory{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
