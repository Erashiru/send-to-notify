// Code generated by mockery v2.38.0. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	models "github.com/kwaaka-team/orders-core/core/menu/models"
)

// Repository is an autogenerated mock type for the Repository type
type Repository struct {
	mock.Mock
}

// AddDescriptionInProduct provides a mock function with given fields: ctx, req
func (_m *Repository) AddDescriptionInProduct(ctx context.Context, req models.AddLanguageDescriptionRequest) error {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for AddDescriptionInProduct")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, models.AddLanguageDescriptionRequest) error); ok {
		r0 = rf(ctx, req)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// AddDescriptionInSection provides a mock function with given fields: ctx, req
func (_m *Repository) AddDescriptionInSection(ctx context.Context, req models.AddLanguageDescriptionRequest) error {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for AddDescriptionInSection")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, models.AddLanguageDescriptionRequest) error); ok {
		r0 = rf(ctx, req)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// AddNameInAttribute provides a mock function with given fields: ctx, req
func (_m *Repository) AddNameInAttribute(ctx context.Context, req models.AddLanguageDescriptionRequest) error {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for AddNameInAttribute")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, models.AddLanguageDescriptionRequest) error); ok {
		r0 = rf(ctx, req)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// AddNameInAttributeGroup provides a mock function with given fields: ctx, req
func (_m *Repository) AddNameInAttributeGroup(ctx context.Context, req models.AddLanguageDescriptionRequest) error {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for AddNameInAttributeGroup")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, models.AddLanguageDescriptionRequest) error); ok {
		r0 = rf(ctx, req)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// AddNameInProduct provides a mock function with given fields: ctx, req
func (_m *Repository) AddNameInProduct(ctx context.Context, req models.AddLanguageDescriptionRequest) error {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for AddNameInProduct")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, models.AddLanguageDescriptionRequest) error); ok {
		r0 = rf(ctx, req)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// AddNameInSection provides a mock function with given fields: ctx, req
func (_m *Repository) AddNameInSection(ctx context.Context, req models.AddLanguageDescriptionRequest) error {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for AddNameInSection")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, models.AddLanguageDescriptionRequest) error); ok {
		r0 = rf(ctx, req)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// AddRegulatoryInformation provides a mock function with given fields: ctx, req
func (_m *Repository) AddRegulatoryInformation(ctx context.Context, req models.RegulatoryInformationRequest) error {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for AddRegulatoryInformation")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, models.RegulatoryInformationRequest) error); ok {
		r0 = rf(ctx, req)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// BulkUpdateAttributesAvailability provides a mock function with given fields: ctx, menuId, attributeIds, availability
func (_m *Repository) BulkUpdateAttributesAvailability(ctx context.Context, menuId string, attributeIds []string, availability bool) error {
	ret := _m.Called(ctx, menuId, attributeIds, availability)

	if len(ret) == 0 {
		panic("no return value specified for BulkUpdateAttributesAvailability")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, []string, bool) error); ok {
		r0 = rf(ctx, menuId, attributeIds, availability)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// BulkUpdateAttributesDisabledStatus provides a mock function with given fields: ctx, menuId, attributeIds, isDisabled
func (_m *Repository) BulkUpdateAttributesDisabledStatus(ctx context.Context, menuId string, attributeIds []string, isDisabled bool) error {
	ret := _m.Called(ctx, menuId, attributeIds, isDisabled)

	if len(ret) == 0 {
		panic("no return value specified for BulkUpdateAttributesDisabledStatus")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, []string, bool) error); ok {
		r0 = rf(ctx, menuId, attributeIds, isDisabled)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// BulkUpdateAttributesIsDeleted provides a mock function with given fields: ctx, menuId, attributeIds, isDeleted, reason
func (_m *Repository) BulkUpdateAttributesIsDeleted(ctx context.Context, menuId string, attributeIds []string, isDeleted bool, reason string) error {
	ret := _m.Called(ctx, menuId, attributeIds, isDeleted, reason)

	if len(ret) == 0 {
		panic("no return value specified for BulkUpdateAttributesIsDeleted")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, []string, bool, string) error); ok {
		r0 = rf(ctx, menuId, attributeIds, isDeleted, reason)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// BulkUpdateProductsAvailability provides a mock function with given fields: ctx, menuId, productIds, availability
func (_m *Repository) BulkUpdateProductsAvailability(ctx context.Context, menuId string, productIds []string, availability bool) error {
	ret := _m.Called(ctx, menuId, productIds, availability)

	if len(ret) == 0 {
		panic("no return value specified for BulkUpdateProductsAvailability")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, []string, bool) error); ok {
		r0 = rf(ctx, menuId, productIds, availability)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// BulkUpdateProductsDisabledStatus provides a mock function with given fields: ctx, menuId, productIds, isDisabled
func (_m *Repository) BulkUpdateProductsDisabledStatus(ctx context.Context, menuId string, productIds []string, isDisabled bool) error {
	ret := _m.Called(ctx, menuId, productIds, isDisabled)

	if len(ret) == 0 {
		panic("no return value specified for BulkUpdateProductsDisabledStatus")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, []string, bool) error); ok {
		r0 = rf(ctx, menuId, productIds, isDisabled)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// BulkUpdateProductsIsDeleted provides a mock function with given fields: ctx, menuId, productIds, isDeleted, reason
func (_m *Repository) BulkUpdateProductsIsDeleted(ctx context.Context, menuId string, productIds []string, isDeleted bool, reason string) error {
	ret := _m.Called(ctx, menuId, productIds, isDeleted, reason)

	if len(ret) == 0 {
		panic("no return value specified for BulkUpdateProductsIsDeleted")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, []string, bool, string) error); ok {
		r0 = rf(ctx, menuId, productIds, isDeleted, reason)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ChangeDescriptionInProduct provides a mock function with given fields: ctx, req
func (_m *Repository) ChangeDescriptionInProduct(ctx context.Context, req models.AddLanguageDescriptionRequest) error {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for ChangeDescriptionInProduct")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, models.AddLanguageDescriptionRequest) error); ok {
		r0 = rf(ctx, req)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ChangeDescriptionInSection provides a mock function with given fields: ctx, req
func (_m *Repository) ChangeDescriptionInSection(ctx context.Context, req models.AddLanguageDescriptionRequest) error {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for ChangeDescriptionInSection")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, models.AddLanguageDescriptionRequest) error); ok {
		r0 = rf(ctx, req)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ChangeNameInAttribute provides a mock function with given fields: ctx, req
func (_m *Repository) ChangeNameInAttribute(ctx context.Context, req models.AddLanguageDescriptionRequest) error {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for ChangeNameInAttribute")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, models.AddLanguageDescriptionRequest) error); ok {
		r0 = rf(ctx, req)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ChangeNameInAttributeGroup provides a mock function with given fields: ctx, req
func (_m *Repository) ChangeNameInAttributeGroup(ctx context.Context, req models.AddLanguageDescriptionRequest) error {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for ChangeNameInAttributeGroup")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, models.AddLanguageDescriptionRequest) error); ok {
		r0 = rf(ctx, req)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ChangeNameInProduct provides a mock function with given fields: ctx, req
func (_m *Repository) ChangeNameInProduct(ctx context.Context, req models.AddLanguageDescriptionRequest) error {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for ChangeNameInProduct")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, models.AddLanguageDescriptionRequest) error); ok {
		r0 = rf(ctx, req)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ChangeNameInSection provides a mock function with given fields: ctx, req
func (_m *Repository) ChangeNameInSection(ctx context.Context, req models.AddLanguageDescriptionRequest) error {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for ChangeNameInSection")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, models.AddLanguageDescriptionRequest) error); ok {
		r0 = rf(ctx, req)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ChangeRegulatoryInformation provides a mock function with given fields: ctx, req
func (_m *Repository) ChangeRegulatoryInformation(ctx context.Context, req models.RegulatoryInformationRequest) error {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for ChangeRegulatoryInformation")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, models.RegulatoryInformationRequest) error); ok {
		r0 = rf(ctx, req)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteAttrGroupFromProduct provides a mock function with given fields: ctx, menuID, productID, attrGroupID
func (_m *Repository) DeleteAttrGroupFromProduct(ctx context.Context, menuID string, productID string, attrGroupID string) error {
	ret := _m.Called(ctx, menuID, productID, attrGroupID)

	if len(ret) == 0 {
		panic("no return value specified for DeleteAttrGroupFromProduct")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) error); ok {
		r0 = rf(ctx, menuID, productID, attrGroupID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteAttributesFromAttributeGroup provides a mock function with given fields: ctx, menuID, attributeIDs
func (_m *Repository) DeleteAttributesFromAttributeGroup(ctx context.Context, menuID string, attributeIDs []string) error {
	ret := _m.Called(ctx, menuID, attributeIDs)

	if len(ret) == 0 {
		panic("no return value specified for DeleteAttributesFromAttributeGroup")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, []string) error); ok {
		r0 = rf(ctx, menuID, attributeIDs)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FindById provides a mock function with given fields: ctx, menuID
func (_m *Repository) FindById(ctx context.Context, menuID string) (*models.Menu, error) {
	ret := _m.Called(ctx, menuID)

	if len(ret) == 0 {
		panic("no return value specified for FindById")
	}

	var r0 *models.Menu
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*models.Menu, error)); ok {
		return rf(ctx, menuID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *models.Menu); ok {
		r0 = rf(ctx, menuID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Menu)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, menuID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCombosByMenuId provides a mock function with given fields: ctx, menuId
func (_m *Repository) GetCombosByMenuId(ctx context.Context, menuId string) ([]models.Combo, int64, error) {
	ret := _m.Called(ctx, menuId)

	if len(ret) == 0 {
		panic("no return value specified for GetCombosByMenuId")
	}

	var r0 []models.Combo
	var r1 int64
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, string) ([]models.Combo, int64, error)); ok {
		return rf(ctx, menuId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) []models.Combo); ok {
		r0 = rf(ctx, menuId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Combo)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) int64); ok {
		r1 = rf(ctx, menuId)
	} else {
		r1 = ret.Get(1).(int64)
	}

	if rf, ok := ret.Get(2).(func(context.Context, string) error); ok {
		r2 = rf(ctx, menuId)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetProductsByMenuIDAndExtIds provides a mock function with given fields: ctx, menuId, productsExtIds
func (_m *Repository) GetProductsByMenuIDAndExtIds(ctx context.Context, menuId string, productsExtIds []string) (models.Products, error) {
	ret := _m.Called(ctx, menuId, productsExtIds)

	if len(ret) == 0 {
		panic("no return value specified for GetProductsByMenuIDAndExtIds")
	}

	var r0 models.Products
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, []string) (models.Products, error)); ok {
		return rf(ctx, menuId, productsExtIds)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, []string) models.Products); ok {
		r0 = rf(ctx, menuId, productsExtIds)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(models.Products)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, []string) error); ok {
		r1 = rf(ctx, menuId, productsExtIds)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetProductsByMenuIDAndSectionID provides a mock function with given fields: ctx, menuId, sectionId
func (_m *Repository) GetProductsByMenuIDAndSectionID(ctx context.Context, menuId string, sectionId string) (models.Products, error) {
	ret := _m.Called(ctx, menuId, sectionId)

	if len(ret) == 0 {
		panic("no return value specified for GetProductsByMenuIDAndSectionID")
	}

	var r0 models.Products
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (models.Products, error)); ok {
		return rf(ctx, menuId, sectionId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) models.Products); ok {
		r0 = rf(ctx, menuId, sectionId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(models.Products)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, menuId, sectionId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Insert provides a mock function with given fields: ctx, _a1
func (_m *Repository) Insert(ctx context.Context, _a1 models.Menu) (string, error) {
	ret := _m.Called(ctx, _a1)

	if len(ret) == 0 {
		panic("no return value specified for Insert")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, models.Menu) (string, error)); ok {
		return rf(ctx, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, models.Menu) string); ok {
		r0 = rf(ctx, _a1)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, models.Menu) error); ok {
		r1 = rf(ctx, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListProductsByMenuId provides a mock function with given fields: ctx, menuId
func (_m *Repository) ListProductsByMenuId(ctx context.Context, menuId string) ([]models.Product, int64, error) {
	ret := _m.Called(ctx, menuId)

	if len(ret) == 0 {
		panic("no return value specified for ListProductsByMenuId")
	}

	var r0 []models.Product
	var r1 int64
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, string) ([]models.Product, int64, error)); ok {
		return rf(ctx, menuId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) []models.Product); ok {
		r0 = rf(ctx, menuId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Product)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) int64); ok {
		r1 = rf(ctx, menuId)
	} else {
		r1 = ret.Get(1).(int64)
	}

	if rf, ok := ret.Get(2).(func(context.Context, string) error); ok {
		r2 = rf(ctx, menuId)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// SearchProduct provides a mock function with given fields: ctx, menuId, productName
func (_m *Repository) SearchProduct(ctx context.Context, menuId string, productName string) ([]models.Product, error) {
	ret := _m.Called(ctx, menuId, productName)

	if len(ret) == 0 {
		panic("no return value specified for SearchProduct")
	}

	var r0 []models.Product
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) ([]models.Product, error)); ok {
		return rf(ctx, menuId, productName)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) []models.Product); ok {
		r0 = rf(ctx, menuId, productName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Product)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, menuId, productName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateAttributeStopListStatus provides a mock function with given fields: ctx, menuId, attributeID, isAvailable, isDisabled
func (_m *Repository) UpdateAttributeStopListStatus(ctx context.Context, menuId string, attributeID string, isAvailable *bool, isDisabled *bool) error {
	ret := _m.Called(ctx, menuId, attributeID, isAvailable, isDisabled)

	if len(ret) == 0 {
		panic("no return value specified for UpdateAttributeStopListStatus")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, *bool, *bool) error); ok {
		r0 = rf(ctx, menuId, attributeID, isAvailable, isDisabled)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateExcludedFromMenuProduct provides a mock function with given fields: ctx, menuID, productIDs
func (_m *Repository) UpdateExcludedFromMenuProduct(ctx context.Context, menuID string, productIDs []string) error {
	ret := _m.Called(ctx, menuID, productIDs)

	if len(ret) == 0 {
		panic("no return value specified for UpdateExcludedFromMenuProduct")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, []string) error); ok {
		r0 = rf(ctx, menuID, productIDs)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateMenuEntities provides a mock function with given fields: ctx, menuId, _a2
func (_m *Repository) UpdateMenuEntities(ctx context.Context, menuId string, _a2 models.Menu) error {
	ret := _m.Called(ctx, menuId, _a2)

	if len(ret) == 0 {
		panic("no return value specified for UpdateMenuEntities")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, models.Menu) error); ok {
		r0 = rf(ctx, menuId, _a2)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateProductStopListStatus provides a mock function with given fields: ctx, menuId, productID, req
func (_m *Repository) UpdateProductStopListStatus(ctx context.Context, menuId string, productID string, req models.ProductUpdateRequest) error {
	ret := _m.Called(ctx, menuId, productID, req)

	if len(ret) == 0 {
		panic("no return value specified for UpdateProductStopListStatus")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, models.ProductUpdateRequest) error); ok {
		r0 = rf(ctx, menuId, productID, req)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateProductsDisabledByValidation provides a mock function with given fields: ctx, menuID, productIDs, disabledByValidation
func (_m *Repository) UpdateProductsDisabledByValidation(ctx context.Context, menuID string, productIDs []string, disabledByValidation bool) error {
	ret := _m.Called(ctx, menuID, productIDs, disabledByValidation)

	if len(ret) == 0 {
		panic("no return value specified for UpdateProductsDisabledByValidation")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, []string, bool) error); ok {
		r0 = rf(ctx, menuID, productIDs, disabledByValidation)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateProductsImageAndDescription provides a mock function with given fields: ctx, menuID, req
func (_m *Repository) UpdateProductsImageAndDescription(ctx context.Context, menuID string, req []models.UpdateProductImageAndDescription) error {
	ret := _m.Called(ctx, menuID, req)

	if len(ret) == 0 {
		panic("no return value specified for UpdateProductsImageAndDescription")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, []models.UpdateProductImageAndDescription) error); ok {
		r0 = rf(ctx, menuID, req)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateStopList provides a mock function with given fields: ctx, menuId, stopListProducts
func (_m *Repository) UpdateStopList(ctx context.Context, menuId string, stopListProducts []string) error {
	ret := _m.Called(ctx, menuId, stopListProducts)

	if len(ret) == 0 {
		panic("no return value specified for UpdateStopList")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, []string) error); ok {
		r0 = rf(ctx, menuId, stopListProducts)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateAttributesPrice provides a mock function with given fields: ctx, menuId, req
func (_m *Repository) UpdateAttributesPrice(ctx context.Context, menuID string, req []models.UpdateAttributePrice) error{
	ret := _m.Called(ctx, menuID, req)

	if len(ret) == 0 {
		panic("no return value specified for UpdateAttributesPrice")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, []models.UpdateAttributePrice) error); ok {
		r0 = rf(ctx, menuID, req)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewRepository creates a new instance of Repository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *Repository {
	mock := &Repository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
