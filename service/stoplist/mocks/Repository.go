// Code generated by mockery v2.38.0. DO NOT EDIT.

package mocks

import (
	context "context"

	models "github.com/kwaaka-team/orders-core/core/menu/models"
	mock "github.com/stretchr/testify/mock"
)

// Repository is an autogenerated mock type for the Repository type
type Repository struct {
	mock.Mock
}

// InsertStopListTransaction provides a mock function with given fields: ctx, req
func (_m *Repository) InsertStopListTransaction(ctx context.Context, req models.StopListTransaction) error {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for InsertStopListTransaction")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, models.StopListTransaction) error); ok {
		r0 = rf(ctx, req)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

func (_m *Repository)GetLastTransactionByStoreIDForProducts(ctx context.Context, storeID,deliveryService string) (models.StopListTransaction, error){
	ret := _m.Called(ctx, storeID, deliveryService)

	if len(ret) == 0 {
		panic("no return value specified for GetLastTransactionByStoreIDForProducts")
	}

	var r0 models.StopListTransaction
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (models.StopListTransaction, error)); ok {
		r0, r1 = rf(ctx, storeID, deliveryService)
	} else {
		r1 = ret.Error(0)
	}

	return r0, r1
}

func( _m *Repository)GetLastTransactionByStoreIDForAttributes(ctx context.Context, storeID, deliveryService string) (models.StopListTransaction, error){
	ret := _m.Called(ctx, storeID, deliveryService)

	if len(ret) == 0 {
		panic("no return value specified for GetLastTransactionByStoreIDForProducts")
	}

	var r0 models.StopListTransaction
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (models.StopListTransaction, error)); ok {
		r0, r1 = rf(ctx, storeID, deliveryService)
	} else {
		r1 = ret.Error(0)
	}

	return r0, r1
}

func (_m *Repository)UpdateByTransactionID(ctx context.Context, transactionId, status string, products models.StopListProducts, attributes models.StopListAttributes) error{

	ret := _m.Called(ctx, transactionId, products, attributes)

	if len(ret) == 0{
		panic("no return value specified for UpdateByTransactionID")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, models.StopListProducts,models.StopListAttributes ) error); ok {
		r0 = rf(ctx, transactionId, status, products, attributes)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewRepository creates a new instance of Repository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *Repository {
	mock := &Repository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
