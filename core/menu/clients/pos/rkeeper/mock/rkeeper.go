// Code generated by MockGen. DO NOT EDIT.
// Source: ./core/clients/pos/rkeeper/rkeeper.go

// Package mock_rkeeper is a generated GoMock package.
package mock_rkeeper

import (
	context "context"
	"github.com/kwaaka-team/orders-core/core/menu/models"
	storeModels "github.com/kwaaka-team/orders-core/core/storecore/models"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockRkeeper is a mock of Rkeeper interface.
type MockRkeeper struct {
	ctrl     *gomock.Controller
	recorder *MockRkeeperMockRecorder
}

// MockRkeeperMockRecorder is the mock recorder for MockRkeeper.
type MockRkeeperMockRecorder struct {
	mock *MockRkeeper
}

// NewMockRkeeper creates a new mock instance.
func NewMockRkeeper(ctrl *gomock.Controller) *MockRkeeper {
	mock := &MockRkeeper{ctrl: ctrl}
	mock.recorder = &MockRkeeperMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRkeeper) EXPECT() *MockRkeeperMockRecorder {
	return m.recorder
}

// GetMenu mocks base method.
func (m *MockRkeeper) GetMenu(ctx context.Context, store storeModels.Store) (models.Menu, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMenu", ctx, store)
	ret0, _ := ret[0].(models.Menu)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMenu indicates an expected call of GetMenu.
func (mr *MockRkeeperMockRecorder) GetMenu(ctx, store interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMenu", reflect.TypeOf((*MockRkeeper)(nil).GetMenu), ctx, store)
}

// GetStopList mocks base method.
func (m *MockRkeeper) GetStopList(ctx context.Context, store storeModels.Store) (models.StopListItems, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStopList", ctx, store)
	ret0, _ := ret[0].(models.StopListItems)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStopList indicates an expected call of GetStopList.
func (mr *MockRkeeperMockRecorder) GetStopList(ctx, store interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStopList", reflect.TypeOf((*MockRkeeper)(nil).GetStopList), ctx, store)
}

// UpdateMenu mocks base method.
func (m *MockRkeeper) UpdateMenu(ctx context.Context, store storeModels.Store) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateMenu", ctx, store)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateMenu indicates an expected call of UpdateMenu.
func (mr *MockRkeeperMockRecorder) UpdateMenu(ctx, store interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateMenu", reflect.TypeOf((*MockRkeeper)(nil).UpdateMenu), ctx, store)
}
