// Code generated by MockGen. DO NOT EDIT.
// Source: ./core/clients/pos/iiko/iiko.go

// Package mock_iiko is a generated GoMock package.
package mock_iiko

import (
	context "context"
	"github.com/kwaaka-team/orders-core/core/menu/models"
	storeModels "github.com/kwaaka-team/orders-core/core/storecore/models"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockIIKO is a mock of IIKO interface.
type MockIIKO struct {
	ctrl     *gomock.Controller
	recorder *MockIIKOMockRecorder
}

// MockIIKOMockRecorder is the mock recorder for MockIIKO.
type MockIIKOMockRecorder struct {
	mock *MockIIKO
}

// NewMockIIKO creates a new mock instance.
func NewMockIIKO(ctrl *gomock.Controller) *MockIIKO {
	mock := &MockIIKO{ctrl: ctrl}
	mock.recorder = &MockIIKOMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIIKO) EXPECT() *MockIIKOMockRecorder {
	return m.recorder
}

// GetMenu mocks base method.
func (m *MockIIKO) GetMenu(ctx context.Context, store storeModels.Store) (models.Menu, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMenu", ctx, store)
	ret0, _ := ret[0].(models.Menu)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMenu indicates an expected call of GetMenu.
func (mr *MockIIKOMockRecorder) GetMenu(ctx, store interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMenu", reflect.TypeOf((*MockIIKO)(nil).GetMenu), ctx, store)
}

// GetStopList mocks base method.
func (m *MockIIKO) GetStopList(ctx context.Context, store storeModels.Store) (models.StopListItems, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStopList", ctx, store)
	ret0, _ := ret[0].(models.StopListItems)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStopList indicates an expected call of GetStopList.
func (mr *MockIIKOMockRecorder) GetStopList(ctx, store interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStopList", reflect.TypeOf((*MockIIKO)(nil).GetStopList), ctx, store)
}

// UpdateMenu mocks base method.
func (m *MockIIKO) UpdateMenu(ctx context.Context, store storeModels.Store) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateMenu", ctx, store)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateMenu indicates an expected call of UpdateMenu.
func (mr *MockIIKOMockRecorder) UpdateMenu(ctx, store interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateMenu", reflect.TypeOf((*MockIIKO)(nil).UpdateMenu), ctx, store)
}
