// Code generated by MockGen. DO NOT EDIT.
// Source: ./core/database/drivers/datastore.go

// Package mock_drivers is a generated GoMock package.
package mock_drivers

import (
	context "context"
	"github.com/kwaaka-team/orders-core/core/menu/database/drivers"
	"github.com/kwaaka-team/orders-core/core/menu/models"
	"github.com/kwaaka-team/orders-core/core/menu/models/selector"
	storeModels "github.com/kwaaka-team/orders-core/core/storecore/models"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	mongo "go.mongodb.org/mongo-driver/mongo"
)

// MockDataStore is a mock of DataStore interface.
type MockDataStore struct {
	ctrl     *gomock.Controller
	recorder *MockDataStoreMockRecorder
}

// MockDataStoreMockRecorder is the mock recorder for MockDataStore.
type MockDataStoreMockRecorder struct {
	mock *MockDataStore
}

// NewMockDataStore creates a new mock instance.
func NewMockDataStore(ctrl *gomock.Controller) *MockDataStore {
	mock := &MockDataStore{ctrl: ctrl}
	mock.recorder = &MockDataStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDataStore) EXPECT() *MockDataStoreMockRecorder {
	return m.recorder
}

// Client mocks base method.
func (m *MockDataStore) Client() *mongo.Client {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Client")
	ret0, _ := ret[0].(*mongo.Client)
	return ret0
}

// Client indicates an expected call of Client.
func (mr *MockDataStoreMockRecorder) Client() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Client", reflect.TypeOf((*MockDataStore)(nil).Client))
}

// Close mocks base method.
func (m *MockDataStore) Close(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockDataStoreMockRecorder) Close(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockDataStore)(nil).Close), ctx)
}

// Connect mocks base method.
func (m *MockDataStore) Connect(client *mongo.Client) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Connect", client)
	ret0, _ := ret[0].(error)
	return ret0
}

// Connect indicates an expected call of Connect.
func (mr *MockDataStoreMockRecorder) Connect(client interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Connect", reflect.TypeOf((*MockDataStore)(nil).Connect), client)
}

// MSPositionsRepository mocks base method.
func (m *MockDataStore) MSPositionsRepository() drivers.MSPositionsRepository {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MSPositionsRepository")
	ret0, _ := ret[0].(drivers.MSPositionsRepository)
	return ret0
}

// MSPositionsRepository indicates an expected call of MSPositionsRepository.
func (mr *MockDataStoreMockRecorder) MSPositionsRepository() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MSPositionsRepository", reflect.TypeOf((*MockDataStore)(nil).MSPositionsRepository))
}

// MenuRepository mocks base method.
func (m *MockDataStore) MenuRepository() drivers.MenuRepository {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MenuRepository")
	ret0, _ := ret[0].(drivers.MenuRepository)
	return ret0
}

// MenuRepository indicates an expected call of MenuRepository.
func (mr *MockDataStoreMockRecorder) MenuRepository() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MenuRepository", reflect.TypeOf((*MockDataStore)(nil).MenuRepository))
}

// MenuUploadTransactionRepository mocks base method.
func (m *MockDataStore) MenuUploadTransactionRepository() drivers.MenuUploadTransactionRepository {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MenuUploadTransactionRepository")
	ret0, _ := ret[0].(drivers.MenuUploadTransactionRepository)
	return ret0
}

// MenuUploadTransactionRepository indicates an expected call of MenuUploadTransactionRepository.
func (mr *MockDataStoreMockRecorder) MenuUploadTransactionRepository() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MenuUploadTransactionRepository", reflect.TypeOf((*MockDataStore)(nil).MenuUploadTransactionRepository))
}

// Name mocks base method.
func (m *MockDataStore) Name() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Name")
	ret0, _ := ret[0].(string)
	return ret0
}

// Name indicates an expected call of Name.
func (mr *MockDataStoreMockRecorder) Name() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Name", reflect.TypeOf((*MockDataStore)(nil).Name))
}

// Ping mocks base method.
func (m *MockDataStore) Ping() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Ping")
	ret0, _ := ret[0].(error)
	return ret0
}

// Ping indicates an expected call of Ping.
func (mr *MockDataStoreMockRecorder) Ping() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Ping", reflect.TypeOf((*MockDataStore)(nil).Ping))
}

// PromoRepository mocks base method.
func (m *MockDataStore) PromoRepository() drivers.PromoRepository {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PromoRepository")
	ret0, _ := ret[0].(drivers.PromoRepository)
	return ret0
}

// PromoRepository indicates an expected call of PromoRepository.
func (mr *MockDataStoreMockRecorder) PromoRepository() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PromoRepository", reflect.TypeOf((*MockDataStore)(nil).PromoRepository))
}

// SequencesRepository mocks base method.
func (m *MockDataStore) SequencesRepository() drivers.SequencesRepository {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SequencesRepository")
	ret0, _ := ret[0].(drivers.SequencesRepository)
	return ret0
}

// SequencesRepository indicates an expected call of SequencesRepository.
func (mr *MockDataStoreMockRecorder) SequencesRepository() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SequencesRepository", reflect.TypeOf((*MockDataStore)(nil).SequencesRepository))
}

// StartSession mocks base method.
func (m *MockDataStore) StartSession(ctx context.Context) (context.Context, drivers.TxCallback, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartSession", ctx)
	ret0, _ := ret[0].(context.Context)
	ret1, _ := ret[1].(drivers.TxCallback)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// StartSession indicates an expected call of StartSession.
func (mr *MockDataStoreMockRecorder) StartSession(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartSession", reflect.TypeOf((*MockDataStore)(nil).StartSession), ctx)
}

// StopListTransactionRepository mocks base method.
func (m *MockDataStore) StopListTransactionRepository() drivers.StopListTransactionRepository {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StopListTransactionRepository")
	ret0, _ := ret[0].(drivers.StopListTransactionRepository)
	return ret0
}

// StopListTransactionRepository indicates an expected call of StopListTransactionRepository.
func (mr *MockDataStoreMockRecorder) StopListTransactionRepository() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StopListTransactionRepository", reflect.TypeOf((*MockDataStore)(nil).StopListTransactionRepository))
}

// StoreRepository mocks base method.
func (m *MockDataStore) StoreRepository() drivers.StoreRepository {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StoreRepository")
	ret0, _ := ret[0].(drivers.StoreRepository)
	return ret0
}

// StoreRepository indicates an expected call of StoreRepository.
func (mr *MockDataStoreMockRecorder) StoreRepository() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StoreRepository", reflect.TypeOf((*MockDataStore)(nil).StoreRepository))
}

// MockBase is a mock of Base interface.
type MockBase struct {
	ctrl     *gomock.Controller
	recorder *MockBaseMockRecorder
}

// MockBaseMockRecorder is the mock recorder for MockBase.
type MockBaseMockRecorder struct {
	mock *MockBase
}

// NewMockBase creates a new mock instance.
func NewMockBase(ctrl *gomock.Controller) *MockBase {
	mock := &MockBase{ctrl: ctrl}
	mock.recorder = &MockBaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBase) EXPECT() *MockBaseMockRecorder {
	return m.recorder
}

// Client mocks base method.
func (m *MockBase) Client() *mongo.Client {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Client")
	ret0, _ := ret[0].(*mongo.Client)
	return ret0
}

// Client indicates an expected call of Client.
func (mr *MockBaseMockRecorder) Client() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Client", reflect.TypeOf((*MockBase)(nil).Client))
}

// Close mocks base method.
func (m *MockBase) Close(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockBaseMockRecorder) Close(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockBase)(nil).Close), ctx)
}

// Connect mocks base method.
func (m *MockBase) Connect(client *mongo.Client) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Connect", client)
	ret0, _ := ret[0].(error)
	return ret0
}

// Connect indicates an expected call of Connect.
func (mr *MockBaseMockRecorder) Connect(client interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Connect", reflect.TypeOf((*MockBase)(nil).Connect), client)
}

// Name mocks base method.
func (m *MockBase) Name() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Name")
	ret0, _ := ret[0].(string)
	return ret0
}

// Name indicates an expected call of Name.
func (mr *MockBaseMockRecorder) Name() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Name", reflect.TypeOf((*MockBase)(nil).Name))
}

// Ping mocks base method.
func (m *MockBase) Ping() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Ping")
	ret0, _ := ret[0].(error)
	return ret0
}

// Ping indicates an expected call of Ping.
func (mr *MockBaseMockRecorder) Ping() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Ping", reflect.TypeOf((*MockBase)(nil).Ping))
}

// MockTxStarter is a mock of TxStarter interface.
type MockTxStarter struct {
	ctrl     *gomock.Controller
	recorder *MockTxStarterMockRecorder
}

// MockTxStarterMockRecorder is the mock recorder for MockTxStarter.
type MockTxStarterMockRecorder struct {
	mock *MockTxStarter
}

// NewMockTxStarter creates a new mock instance.
func NewMockTxStarter(ctrl *gomock.Controller) *MockTxStarter {
	mock := &MockTxStarter{ctrl: ctrl}
	mock.recorder = &MockTxStarterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTxStarter) EXPECT() *MockTxStarterMockRecorder {
	return m.recorder
}

// StartSession mocks base method.
func (m *MockTxStarter) StartSession(ctx context.Context) (context.Context, drivers.TxCallback, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartSession", ctx)
	ret0, _ := ret[0].(context.Context)
	ret1, _ := ret[1].(drivers.TxCallback)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// StartSession indicates an expected call of StartSession.
func (mr *MockTxStarterMockRecorder) StartSession(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartSession", reflect.TypeOf((*MockTxStarter)(nil).StartSession), ctx)
}

// MockMenuRepository is a mock of MenuRepository interface.
type MockMenuRepository struct {
	ctrl     *gomock.Controller
	recorder *MockMenuRepositoryMockRecorder
}

// MockMenuRepositoryMockRecorder is the mock recorder for MockMenuRepository.
type MockMenuRepositoryMockRecorder struct {
	mock *MockMenuRepository
}

// NewMockMenuRepository creates a new mock instance.
func NewMockMenuRepository(ctrl *gomock.Controller) *MockMenuRepository {
	mock := &MockMenuRepository{ctrl: ctrl}
	mock.recorder = &MockMenuRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMenuRepository) EXPECT() *MockMenuRepositoryMockRecorder {
	return m.recorder
}

// Delete mocks base method.
func (m *MockMenuRepository) Delete(ctx context.Context, menuID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, menuID)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockMenuRepositoryMockRecorder) Delete(ctx, menuID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockMenuRepository)(nil).Delete), ctx, menuID)
}

// Get mocks base method.
func (m *MockMenuRepository) Get(ctx context.Context, query selector.Menu) (models.Menu, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, query)
	ret0, _ := ret[0].(models.Menu)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockMenuRepositoryMockRecorder) Get(ctx, query interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockMenuRepository)(nil).Get), ctx, query)
}

// GetAttributesStopList mocks base method.
func (m *MockMenuRepository) GetAttributesStopList(ctx context.Context, query selector.Menu) ([]models.StopListAttribute, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAttributesStopList", ctx, query)
	ret0, _ := ret[0].([]models.StopListAttribute)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAttributesStopList indicates an expected call of GetAttributesStopList.
func (mr *MockMenuRepositoryMockRecorder) GetAttributesStopList(ctx, query interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAttributesStopList", reflect.TypeOf((*MockMenuRepository)(nil).GetAttributesStopList), ctx, query)
}

// GetGroups mocks base method.
func (m *MockMenuRepository) GetGroups(ctx context.Context, query selector.Menu) (models.Groups, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGroups", ctx, query)
	ret0, _ := ret[0].(models.Groups)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGroups indicates an expected call of GetGroups.
func (mr *MockMenuRepositoryMockRecorder) GetGroups(ctx, query interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGroups", reflect.TypeOf((*MockMenuRepository)(nil).GetGroups), ctx, query)
}

// GetIDByName mocks base method.
func (m *MockMenuRepository) GetIDByName(ctx context.Context, name string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetIDByName", ctx, name)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetIDByName indicates an expected call of GetIDByName.
func (mr *MockMenuRepositoryMockRecorder) GetIDByName(ctx, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIDByName", reflect.TypeOf((*MockMenuRepository)(nil).GetIDByName), ctx, name)
}

// GetMenuIDs mocks base method.
func (m *MockMenuRepository) GetMenuIDs(ctx context.Context, query selector.Menu) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMenuIDs", ctx, query)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMenuIDs indicates an expected call of GetMenuIDs.
func (mr *MockMenuRepositoryMockRecorder) GetMenuIDs(ctx, query interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMenuIDs", reflect.TypeOf((*MockMenuRepository)(nil).GetMenuIDs), ctx, query)
}

// GetMenuSection mocks base method.
func (m *MockMenuRepository) GetMenuSection(ctx context.Context, query selector.Menu) ([]*models.Section, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMenuSection", ctx, query)
	ret0, _ := ret[0].([]*models.Section)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMenuSection indicates an expected call of GetMenuSection.
func (mr *MockMenuRepositoryMockRecorder) GetMenuSection(ctx, query interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMenuSection", reflect.TypeOf((*MockMenuRepository)(nil).GetMenuSection), ctx, query)
}

// GetMenuSections mocks base method.
func (m *MockMenuRepository) GetMenuSections(ctx context.Context, query selector.Menu) ([]*models.Section, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMenuSections", ctx, query)
	ret0, _ := ret[0].([]*models.Section)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMenuSections indicates an expected call of GetMenuSections.
func (mr *MockMenuRepositoryMockRecorder) GetMenuSections(ctx, query interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMenuSections", reflect.TypeOf((*MockMenuRepository)(nil).GetMenuSections), ctx, query)
}

// GetProduct mocks base method.
func (m *MockMenuRepository) GetProduct(ctx context.Context, query selector.Menu) (models.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProduct", ctx, query)
	ret0, _ := ret[0].(models.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProduct indicates an expected call of GetProduct.
func (mr *MockMenuRepositoryMockRecorder) GetProduct(ctx, query interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProduct", reflect.TypeOf((*MockMenuRepository)(nil).GetProduct), ctx, query)
}

// GetProductsByIDs mocks base method.
func (m *MockMenuRepository) GetProductsByIDs(ctx context.Context, query selector.Menu, ids []string) ([]models.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProductsByIDs", ctx, query, ids)
	ret0, _ := ret[0].([]models.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProductsByIDs indicates an expected call of GetProductsByIDs.
func (mr *MockMenuRepositoryMockRecorder) GetProductsByIDs(ctx, query, ids interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProductsByIDs", reflect.TypeOf((*MockMenuRepository)(nil).GetProductsByIDs), ctx, query, ids)
}

// GetProductsStopList mocks base method.
func (m *MockMenuRepository) GetProductsStopList(ctx context.Context, query selector.Menu) ([]models.StopListProduct, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProductsStopList", ctx, query)
	ret0, _ := ret[0].([]models.StopListProduct)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProductsStopList indicates an expected call of GetProductsStopList.
func (mr *MockMenuRepositoryMockRecorder) GetProductsStopList(ctx, query interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProductsStopList", reflect.TypeOf((*MockMenuRepository)(nil).GetProductsStopList), ctx, query)
}

// GetPromoProducts mocks base method.
func (m *MockMenuRepository) GetPromoProducts(ctx context.Context, query selector.Menu) ([]models.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPromoProducts", ctx, query)
	ret0, _ := ret[0].([]models.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPromoProducts indicates an expected call of GetPromoProducts.
func (mr *MockMenuRepositoryMockRecorder) GetPromoProducts(ctx, query interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPromoProducts", reflect.TypeOf((*MockMenuRepository)(nil).GetPromoProducts), ctx, query)
}

// Insert mocks base method.
func (m *MockMenuRepository) Insert(ctx context.Context, menu models.Menu) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Insert", ctx, menu)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Insert indicates an expected call of Insert.
func (mr *MockMenuRepositoryMockRecorder) Insert(ctx, menu interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockMenuRepository)(nil).Insert), ctx, menu)
}

// List mocks base method.
func (m *MockMenuRepository) List(ctx context.Context, query selector.Menu) ([]models.Menu, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ctx, query)
	ret0, _ := ret[0].([]models.Menu)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockMenuRepositoryMockRecorder) List(ctx, query interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockMenuRepository)(nil).List), ctx, query)
}

// ListProducts mocks base method.
func (m *MockMenuRepository) ListProducts(ctx context.Context, query selector.Menu) ([]models.Product, int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListProducts", ctx, query)
	ret0, _ := ret[0].([]models.Product)
	ret1, _ := ret[1].(int64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListProducts indicates an expected call of ListProducts.
func (mr *MockMenuRepositoryMockRecorder) ListProducts(ctx, query interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListProducts", reflect.TypeOf((*MockMenuRepository)(nil).ListProducts), ctx, query)
}

// Update mocks base method.
func (m *MockMenuRepository) Update(ctx context.Context, menu models.Menu) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, menu)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockMenuRepositoryMockRecorder) Update(ctx, menu interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockMenuRepository)(nil).Update), ctx, menu)
}

// UpdateSection mocks base method.
func (m *MockMenuRepository) UpdateSection(ctx context.Context, menuID string, section models.Section) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSection", ctx, menuID, section)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateSection indicates an expected call of UpdateSection.
func (mr *MockMenuRepositoryMockRecorder) UpdateSection(ctx, menuID, section interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSection", reflect.TypeOf((*MockMenuRepository)(nil).UpdateSection), ctx, menuID, section)
}

// Upsert mocks base method.
func (m *MockMenuRepository) Upsert(ctx context.Context, req models.Menu) (models.Menu, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Upsert", ctx, req)
	ret0, _ := ret[0].(models.Menu)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Upsert indicates an expected call of Upsert.
func (mr *MockMenuRepositoryMockRecorder) Upsert(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Upsert", reflect.TypeOf((*MockMenuRepository)(nil).Upsert), ctx, req)
}

// MockStoreRepository is a mock of StoreRepository interface.
type MockStoreRepository struct {
	ctrl     *gomock.Controller
	recorder *MockStoreRepositoryMockRecorder
}

// MockStoreRepositoryMockRecorder is the mock recorder for MockStoreRepository.
type MockStoreRepositoryMockRecorder struct {
	mock *MockStoreRepository
}

// NewMockStoreRepository creates a new mock instance.
func NewMockStoreRepository(ctrl *gomock.Controller) *MockStoreRepository {
	mock := &MockStoreRepository{ctrl: ctrl}
	mock.recorder = &MockStoreRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStoreRepository) EXPECT() *MockStoreRepositoryMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockStoreRepository) Get(ctx context.Context, query selector.Store) (storeModels.Store, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, query)
	ret0, _ := ret[0].(storeModels.Store)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockStoreRepositoryMockRecorder) Get(ctx, query interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockStoreRepository)(nil).Get), ctx, query)
}

// List mocks base method.
func (m *MockStoreRepository) List(ctx context.Context, query selector.Store) ([]storeModels.Store, int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ctx, query)
	ret0, _ := ret[0].([]storeModels.Store)
	ret1, _ := ret[1].(int64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// List indicates an expected call of List.
func (mr *MockStoreRepositoryMockRecorder) List(ctx, query interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockStoreRepository)(nil).List), ctx, query)
}

// Update mocks base method.
func (m *MockStoreRepository) Update(ctx context.Context, store storeModels.Store) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, store)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockStoreRepositoryMockRecorder) Update(ctx, store interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockStoreRepository)(nil).Update), ctx, store)
}

// MockSectionRepository is a mock of SectionRepository interface.
type MockSectionRepository struct {
	ctrl     *gomock.Controller
	recorder *MockSectionRepositoryMockRecorder
}

// MockSectionRepositoryMockRecorder is the mock recorder for MockSectionRepository.
type MockSectionRepositoryMockRecorder struct {
	mock *MockSectionRepository
}

// NewMockSectionRepository creates a new mock instance.
func NewMockSectionRepository(ctrl *gomock.Controller) *MockSectionRepository {
	mock := &MockSectionRepository{ctrl: ctrl}
	mock.recorder = &MockSectionRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSectionRepository) EXPECT() *MockSectionRepositoryMockRecorder {
	return m.recorder
}

// GetMenuSection mocks base method.
func (m *MockSectionRepository) GetMenuSection(ctx context.Context, query selector.Menu) ([]*models.Section, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMenuSection", ctx, query)
	ret0, _ := ret[0].([]*models.Section)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMenuSection indicates an expected call of GetMenuSection.
func (mr *MockSectionRepositoryMockRecorder) GetMenuSection(ctx, query interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMenuSection", reflect.TypeOf((*MockSectionRepository)(nil).GetMenuSection), ctx, query)
}

// GetMenuSections mocks base method.
func (m *MockSectionRepository) GetMenuSections(ctx context.Context, query selector.Menu) ([]*models.Section, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMenuSections", ctx, query)
	ret0, _ := ret[0].([]*models.Section)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMenuSections indicates an expected call of GetMenuSections.
func (mr *MockSectionRepositoryMockRecorder) GetMenuSections(ctx, query interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMenuSections", reflect.TypeOf((*MockSectionRepository)(nil).GetMenuSections), ctx, query)
}

// UpdateSection mocks base method.
func (m *MockSectionRepository) UpdateSection(ctx context.Context, menuID string, section models.Section) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSection", ctx, menuID, section)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateSection indicates an expected call of UpdateSection.
func (mr *MockSectionRepositoryMockRecorder) UpdateSection(ctx, menuID, section interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSection", reflect.TypeOf((*MockSectionRepository)(nil).UpdateSection), ctx, menuID, section)
}

// MockProductRepository is a mock of ProductRepository interface.
type MockProductRepository struct {
	ctrl     *gomock.Controller
	recorder *MockProductRepositoryMockRecorder
}

// MockProductRepositoryMockRecorder is the mock recorder for MockProductRepository.
type MockProductRepositoryMockRecorder struct {
	mock *MockProductRepository
}

// NewMockProductRepository creates a new mock instance.
func NewMockProductRepository(ctrl *gomock.Controller) *MockProductRepository {
	mock := &MockProductRepository{ctrl: ctrl}
	mock.recorder = &MockProductRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProductRepository) EXPECT() *MockProductRepositoryMockRecorder {
	return m.recorder
}

// GetProduct mocks base method.
func (m *MockProductRepository) GetProduct(ctx context.Context, query selector.Menu) (models.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProduct", ctx, query)
	ret0, _ := ret[0].(models.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProduct indicates an expected call of GetProduct.
func (mr *MockProductRepositoryMockRecorder) GetProduct(ctx, query interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProduct", reflect.TypeOf((*MockProductRepository)(nil).GetProduct), ctx, query)
}

// GetProductsByIDs mocks base method.
func (m *MockProductRepository) GetProductsByIDs(ctx context.Context, query selector.Menu, ids []string) ([]models.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProductsByIDs", ctx, query, ids)
	ret0, _ := ret[0].([]models.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProductsByIDs indicates an expected call of GetProductsByIDs.
func (mr *MockProductRepositoryMockRecorder) GetProductsByIDs(ctx, query, ids interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProductsByIDs", reflect.TypeOf((*MockProductRepository)(nil).GetProductsByIDs), ctx, query, ids)
}

// GetProductsStopList mocks base method.
func (m *MockProductRepository) GetProductsStopList(ctx context.Context, query selector.Menu) ([]models.StopListProduct, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProductsStopList", ctx, query)
	ret0, _ := ret[0].([]models.StopListProduct)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProductsStopList indicates an expected call of GetProductsStopList.
func (mr *MockProductRepositoryMockRecorder) GetProductsStopList(ctx, query interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProductsStopList", reflect.TypeOf((*MockProductRepository)(nil).GetProductsStopList), ctx, query)
}

// GetPromoProducts mocks base method.
func (m *MockProductRepository) GetPromoProducts(ctx context.Context, query selector.Menu) ([]models.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPromoProducts", ctx, query)
	ret0, _ := ret[0].([]models.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPromoProducts indicates an expected call of GetPromoProducts.
func (mr *MockProductRepositoryMockRecorder) GetPromoProducts(ctx, query interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPromoProducts", reflect.TypeOf((*MockProductRepository)(nil).GetPromoProducts), ctx, query)
}

// ListProducts mocks base method.
func (m *MockProductRepository) ListProducts(ctx context.Context, query selector.Menu) ([]models.Product, int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListProducts", ctx, query)
	ret0, _ := ret[0].([]models.Product)
	ret1, _ := ret[1].(int64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListProducts indicates an expected call of ListProducts.
func (mr *MockProductRepositoryMockRecorder) ListProducts(ctx, query interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListProducts", reflect.TypeOf((*MockProductRepository)(nil).ListProducts), ctx, query)
}

// MockAttributeRepository is a mock of AttributeRepository interface.
type MockAttributeRepository struct {
	ctrl     *gomock.Controller
	recorder *MockAttributeRepositoryMockRecorder
}

// MockAttributeRepositoryMockRecorder is the mock recorder for MockAttributeRepository.
type MockAttributeRepositoryMockRecorder struct {
	mock *MockAttributeRepository
}

// NewMockAttributeRepository creates a new mock instance.
func NewMockAttributeRepository(ctrl *gomock.Controller) *MockAttributeRepository {
	mock := &MockAttributeRepository{ctrl: ctrl}
	mock.recorder = &MockAttributeRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAttributeRepository) EXPECT() *MockAttributeRepositoryMockRecorder {
	return m.recorder
}

// GetAttributesStopList mocks base method.
func (m *MockAttributeRepository) GetAttributesStopList(ctx context.Context, query selector.Menu) ([]models.StopListAttribute, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAttributesStopList", ctx, query)
	ret0, _ := ret[0].([]models.StopListAttribute)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAttributesStopList indicates an expected call of GetAttributesStopList.
func (mr *MockAttributeRepositoryMockRecorder) GetAttributesStopList(ctx, query interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAttributesStopList", reflect.TypeOf((*MockAttributeRepository)(nil).GetAttributesStopList), ctx, query)
}

// MockMenuUploadTransactionRepository is a mock of MenuUploadTransactionRepository interface.
type MockMenuUploadTransactionRepository struct {
	ctrl     *gomock.Controller
	recorder *MockMenuUploadTransactionRepositoryMockRecorder
}

// MockMenuUploadTransactionRepositoryMockRecorder is the mock recorder for MockMenuUploadTransactionRepository.
type MockMenuUploadTransactionRepositoryMockRecorder struct {
	mock *MockMenuUploadTransactionRepository
}

// NewMockMenuUploadTransactionRepository creates a new mock instance.
func NewMockMenuUploadTransactionRepository(ctrl *gomock.Controller) *MockMenuUploadTransactionRepository {
	mock := &MockMenuUploadTransactionRepository{ctrl: ctrl}
	mock.recorder = &MockMenuUploadTransactionRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMenuUploadTransactionRepository) EXPECT() *MockMenuUploadTransactionRepositoryMockRecorder {
	return m.recorder
}

// Delete mocks base method.
func (m *MockMenuUploadTransactionRepository) Delete(ctx context.Context, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockMenuUploadTransactionRepositoryMockRecorder) Delete(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockMenuUploadTransactionRepository)(nil).Delete), ctx, id)
}

// Get mocks base method.
func (m *MockMenuUploadTransactionRepository) Get(ctx context.Context, query selector.MenuUploadTransaction) (models.MenuUploadTransaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, query)
	ret0, _ := ret[0].(models.MenuUploadTransaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockMenuUploadTransactionRepositoryMockRecorder) Get(ctx, query interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockMenuUploadTransactionRepository)(nil).Get), ctx, query)
}

// Insert mocks base method.
func (m *MockMenuUploadTransactionRepository) Insert(ctx context.Context, req models.MenuUploadTransaction) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Insert", ctx, req)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Insert indicates an expected call of Insert.
func (mr *MockMenuUploadTransactionRepositoryMockRecorder) Insert(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockMenuUploadTransactionRepository)(nil).Insert), ctx, req)
}

// List mocks base method.
func (m *MockMenuUploadTransactionRepository) List(ctx context.Context, query selector.MenuUploadTransaction) ([]models.MenuUploadTransaction, int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ctx, query)
	ret0, _ := ret[0].([]models.MenuUploadTransaction)
	ret1, _ := ret[1].(int64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// List indicates an expected call of List.
func (mr *MockMenuUploadTransactionRepositoryMockRecorder) List(ctx, query interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockMenuUploadTransactionRepository)(nil).List), ctx, query)
}

// Update mocks base method.
func (m *MockMenuUploadTransactionRepository) Update(ctx context.Context, req models.MenuUploadTransaction) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, req)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockMenuUploadTransactionRepositoryMockRecorder) Update(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockMenuUploadTransactionRepository)(nil).Update), ctx, req)
}

// MockStopListTransactionRepository is a mock of StopListTransactionRepository interface.
type MockStopListTransactionRepository struct {
	ctrl     *gomock.Controller
	recorder *MockStopListTransactionRepositoryMockRecorder
}

// MockStopListTransactionRepositoryMockRecorder is the mock recorder for MockStopListTransactionRepository.
type MockStopListTransactionRepositoryMockRecorder struct {
	mock *MockStopListTransactionRepository
}

// NewMockStopListTransactionRepository creates a new mock instance.
func NewMockStopListTransactionRepository(ctrl *gomock.Controller) *MockStopListTransactionRepository {
	mock := &MockStopListTransactionRepository{ctrl: ctrl}
	mock.recorder = &MockStopListTransactionRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStopListTransactionRepository) EXPECT() *MockStopListTransactionRepositoryMockRecorder {
	return m.recorder
}

// Insert mocks base method.
func (m *MockStopListTransactionRepository) Insert(ctx context.Context, req models.StopListTransaction) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Insert", ctx, req)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Insert indicates an expected call of Insert.
func (mr *MockStopListTransactionRepositoryMockRecorder) Insert(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockStopListTransactionRepository)(nil).Insert), ctx, req)
}

// MockSequencesRepository is a mock of SequencesRepository interface.
type MockSequencesRepository struct {
	ctrl     *gomock.Controller
	recorder *MockSequencesRepositoryMockRecorder
}

// MockSequencesRepositoryMockRecorder is the mock recorder for MockSequencesRepository.
type MockSequencesRepositoryMockRecorder struct {
	mock *MockSequencesRepository
}

// NewMockSequencesRepository creates a new mock instance.
func NewMockSequencesRepository(ctrl *gomock.Controller) *MockSequencesRepository {
	mock := &MockSequencesRepository{ctrl: ctrl}
	mock.recorder = &MockSequencesRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSequencesRepository) EXPECT() *MockSequencesRepositoryMockRecorder {
	return m.recorder
}

// NextSequenceValue mocks base method.
func (m *MockSequencesRepository) NextSequenceValue(ctx context.Context, name string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NextSequenceValue", ctx, name)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NextSequenceValue indicates an expected call of NextSequenceValue.
func (mr *MockSequencesRepositoryMockRecorder) NextSequenceValue(ctx, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NextSequenceValue", reflect.TypeOf((*MockSequencesRepository)(nil).NextSequenceValue), ctx, name)
}

// MockPromoRepository is a mock of PromoRepository interface.
type MockPromoRepository struct {
	ctrl     *gomock.Controller
	recorder *MockPromoRepositoryMockRecorder
}

// MockPromoRepositoryMockRecorder is the mock recorder for MockPromoRepository.
type MockPromoRepositoryMockRecorder struct {
	mock *MockPromoRepository
}

// NewMockPromoRepository creates a new mock instance.
func NewMockPromoRepository(ctrl *gomock.Controller) *MockPromoRepository {
	mock := &MockPromoRepository{ctrl: ctrl}
	mock.recorder = &MockPromoRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPromoRepository) EXPECT() *MockPromoRepositoryMockRecorder {
	return m.recorder
}

// FindPromos mocks base method.
func (m *MockPromoRepository) FindPromos(ctx context.Context, query selector.Promo) ([]models.Promo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindPromos", ctx, query)
	ret0, _ := ret[0].([]models.Promo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindPromos indicates an expected call of FindPromos.
func (mr *MockPromoRepositoryMockRecorder) FindPromos(ctx, query interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindPromos", reflect.TypeOf((*MockPromoRepository)(nil).FindPromos), ctx, query)
}

// GetPromos mocks base method.
func (m *MockPromoRepository) GetPromos(ctx context.Context, query selector.Promo) (models.Promo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPromos", ctx, query)
	ret0, _ := ret[0].(models.Promo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPromos indicates an expected call of GetPromos.
func (mr *MockPromoRepositoryMockRecorder) GetPromos(ctx, query interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPromos", reflect.TypeOf((*MockPromoRepository)(nil).GetPromos), ctx, query)
}

// MockMSPositionsRepository is a mock of MSPositionsRepository interface.
type MockMSPositionsRepository struct {
	ctrl     *gomock.Controller
	recorder *MockMSPositionsRepositoryMockRecorder
}

// MockMSPositionsRepositoryMockRecorder is the mock recorder for MockMSPositionsRepository.
type MockMSPositionsRepositoryMockRecorder struct {
	mock *MockMSPositionsRepository
}

// NewMockMSPositionsRepository creates a new mock instance.
func NewMockMSPositionsRepository(ctrl *gomock.Controller) *MockMSPositionsRepository {
	mock := &MockMSPositionsRepository{ctrl: ctrl}
	mock.recorder = &MockMSPositionsRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMSPositionsRepository) EXPECT() *MockMSPositionsRepositoryMockRecorder {
	return m.recorder
}

// CreatePosition mocks base method.
func (m *MockMSPositionsRepository) CreatePosition(ctx context.Context, position models.MoySkladPosition) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePosition", ctx, position)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreatePosition indicates an expected call of CreatePosition.
func (mr *MockMSPositionsRepositoryMockRecorder) CreatePosition(ctx, position interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePosition", reflect.TypeOf((*MockMSPositionsRepository)(nil).CreatePosition), ctx, position)
}

// GetPositions mocks base method.
func (m *MockMSPositionsRepository) GetPositions(ctx context.Context, query selector.MoySklad) ([]models.MoySkladPosition, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPositions", ctx, query)
	ret0, _ := ret[0].([]models.MoySkladPosition)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPositions indicates an expected call of GetPositions.
func (mr *MockMSPositionsRepositoryMockRecorder) GetPositions(ctx, query interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPositions", reflect.TypeOf((*MockMSPositionsRepository)(nil).GetPositions), ctx, query)
}

// RemovePosition mocks base method.
func (m *MockMSPositionsRepository) RemovePosition(ctx context.Context, query selector.MoySklad) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemovePosition", ctx, query)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemovePosition indicates an expected call of RemovePosition.
func (mr *MockMSPositionsRepositoryMockRecorder) RemovePosition(ctx, query interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemovePosition", reflect.TypeOf((*MockMSPositionsRepository)(nil).RemovePosition), ctx, query)
}
