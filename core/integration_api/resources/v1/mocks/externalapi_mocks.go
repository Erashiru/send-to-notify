// Code generated by MockGen. DO NOT EDIT.
// Source: /home/ansar/kwaaka-team/orders-core/core/externalapi/managers/order.go

// Package mock_check is a generated GoMock package.
package mock_check

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	models "github.com/kwaaka-team/orders-core/core/externalapi/models"
	dto "github.com/kwaaka-team/orders-core/pkg/order/dto"
)

// MockOrderClient is a mock of OrderClient interface.
type MockOrderClient struct {
	ctrl     *gomock.Controller
	recorder *MockOrderClientMockRecorder
}

// MockOrderClientMockRecorder is the mock recorder for MockOrderClient.
type MockOrderClientMockRecorder struct {
	mock *MockOrderClient
}

// NewMockOrderClient creates a new mock instance.
func NewMockOrderClient(ctrl *gomock.Controller) *MockOrderClient {
	mock := &MockOrderClient{ctrl: ctrl}
	mock.recorder = &MockOrderClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOrderClient) EXPECT() *MockOrderClientMockRecorder {
	return m.recorder
}

// CancelOrder mocks base method.
func (m *MockOrderClient) CancelOrder(ctx context.Context, req models.CancelOrderRequest, id, service, clientSecret string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CancelOrder", ctx, req, id, service, clientSecret)
	ret0, _ := ret[0].(error)
	return ret0
}

// CancelOrder indicates an expected call of CancelOrder.
func (mr *MockOrderClientMockRecorder) CancelOrder(ctx, req, id, service, clientSecret interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CancelOrder", reflect.TypeOf((*MockOrderClient)(nil).CancelOrder), ctx, req, id, service, clientSecret)
}

// GetOrder mocks base method.
func (m *MockOrderClient) GetOrder(ctx context.Context, orderID, service string) (models.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrder", ctx, orderID, service)
	ret0, _ := ret[0].(models.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrder indicates an expected call of GetOrder.
func (mr *MockOrderClientMockRecorder) GetOrder(ctx, orderID, service interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrder", reflect.TypeOf((*MockOrderClient)(nil).GetOrder), ctx, orderID, service)
}

// GetOrderStatus mocks base method.
func (m *MockOrderClient) GetOrderStatus(ctx context.Context, orderID, service string) (models.OrderStatusResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrderStatus", ctx, orderID, service)
	ret0, _ := ret[0].(models.OrderStatusResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrderStatus indicates an expected call of GetOrderStatus.
func (mr *MockOrderClientMockRecorder) GetOrderStatus(ctx, orderID, service interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrderStatus", reflect.TypeOf((*MockOrderClient)(nil).GetOrderStatus), ctx, orderID, service)
}

// GetOrders mocks base method.
func (m *MockOrderClient) GetOrders(ctx context.Context, query dto.OrderSelector) ([]models.Order, int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrders", ctx, query)
	ret0, _ := ret[0].([]models.Order)
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetOrders indicates an expected call of GetOrders.
func (mr *MockOrderClientMockRecorder) GetOrders(ctx, query interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrders", reflect.TypeOf((*MockOrderClient)(nil).GetOrders), ctx, query)
}

// UpdateOrder mocks base method.
func (m *MockOrderClient) UpdateOrder(ctx context.Context, order models.Order, orderID, service, clientSecret string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateOrder", ctx, order, orderID, service, clientSecret)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateOrder indicates an expected call of UpdateOrder.
func (mr *MockOrderClientMockRecorder) UpdateOrder(ctx, order, orderID, service, clientSecret interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateOrder", reflect.TypeOf((*MockOrderClient)(nil).UpdateOrder), ctx, order, orderID, service, clientSecret)
}
