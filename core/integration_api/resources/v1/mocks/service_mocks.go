// Code generated by MockGen. DO NOT EDIT.
// Source: /home/ansar/kwaaka-team/orders-core/service/order/service.go

// Package mock_check is a generated GoMock package.
package mock_check

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	models "github.com/kwaaka-team/orders-core/core/models"
)

// MockOrderCronService is a mock of OrderCronService interface.
type MockOrderCronService struct {
	ctrl     *gomock.Controller
	recorder *MockOrderCronServiceMockRecorder
}

// MockOrderCronServiceMockRecorder is the mock recorder for MockOrderCronService.
type MockOrderCronServiceMockRecorder struct {
	mock *MockOrderCronService
}

// NewMockOrderCronService creates a new mock instance.
func NewMockOrderCronService(ctrl *gomock.Controller) *MockOrderCronService {
	mock := &MockOrderCronService{ctrl: ctrl}
	mock.recorder = &MockOrderCronServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOrderCronService) EXPECT() *MockOrderCronServiceMockRecorder {
	return m.recorder
}

// ActualizeOrdersStatusByPosType mocks base method.
func (m *MockOrderCronService) ActualizeOrdersStatusByPosType(ctx context.Context, posType string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ActualizeOrdersStatusByPosType", ctx, posType)
	ret0, _ := ret[0].(error)
	return ret0
}

// ActualizeOrdersStatusByPosType indicates an expected call of ActualizeOrdersStatusByPosType.
func (mr *MockOrderCronServiceMockRecorder) ActualizeOrdersStatusByPosType(ctx, posType interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ActualizeOrdersStatusByPosType", reflect.TypeOf((*MockOrderCronService)(nil).ActualizeOrdersStatusByPosType), ctx, posType)
}

// MockStatusUpdateService is a mock of StatusUpdateService interface.
type MockStatusUpdateService struct {
	ctrl     *gomock.Controller
	recorder *MockStatusUpdateServiceMockRecorder
}

// MockStatusUpdateServiceMockRecorder is the mock recorder for MockStatusUpdateService.
type MockStatusUpdateServiceMockRecorder struct {
	mock *MockStatusUpdateService
}

// NewMockStatusUpdateService creates a new mock instance.
func NewMockStatusUpdateService(ctrl *gomock.Controller) *MockStatusUpdateService {
	mock := &MockStatusUpdateService{ctrl: ctrl}
	mock.recorder = &MockStatusUpdateServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStatusUpdateService) EXPECT() *MockStatusUpdateServiceMockRecorder {
	return m.recorder
}

// UpdateOrderStatus mocks base method.
func (m *MockStatusUpdateService) UpdateOrderStatus(ctx context.Context, orderID, status, statusDescription string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateOrderStatus", ctx, orderID, status, statusDescription)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateOrderStatus indicates an expected call of UpdateOrderStatus.
func (mr *MockStatusUpdateServiceMockRecorder) UpdateOrderStatus(ctx, orderID, status, statusDescription interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateOrderStatus", reflect.TypeOf((*MockStatusUpdateService)(nil).UpdateOrderStatus), ctx, orderID, status, statusDescription)
}

// MockCreationService is a mock of CreationService interface.
type MockCreationService struct {
	ctrl     *gomock.Controller
	recorder *MockCreationServiceMockRecorder
}

// MockCreationServiceMockRecorder is the mock recorder for MockCreationService.
type MockCreationServiceMockRecorder struct {
	mock *MockCreationService
}

// NewMockCreationService creates a new mock instance.
func NewMockCreationService(ctrl *gomock.Controller) *MockCreationService {
	mock := &MockCreationService{ctrl: ctrl}
	mock.recorder = &MockCreationServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCreationService) EXPECT() *MockCreationServiceMockRecorder {
	return m.recorder
}

// CreateOrder mocks base method.
func (m *MockCreationService) CreateOrder(ctx context.Context, externalStoreID, deliveryService string, aggReq interface{}, storeSecret string) (models.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrder", ctx, externalStoreID, deliveryService, aggReq, storeSecret)
	ret0, _ := ret[0].(models.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateOrder indicates an expected call of CreateOrder.
func (mr *MockCreationServiceMockRecorder) CreateOrder(ctx, externalStoreID, deliveryService, aggReq, storeSecret interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrder", reflect.TypeOf((*MockCreationService)(nil).CreateOrder), ctx, externalStoreID, deliveryService, aggReq, storeSecret)
}
