// Code generated by MockGen. DO NOT EDIT.
// Source: /home/ansar/kwaaka-team/orders-core/core/wolt/managers/order.go

// Package mock_check is a generated GoMock package.
package mock_check

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	models "github.com/kwaaka-team/orders-core/core/wolt/models"
)

// MockOrder is a mock of Order interface.
type woltMockOrder struct {
	ctrl     *gomock.Controller
	recorder *woltMockOrderMockRecorder
}

// MockOrderMockRecorder is the mock recorder for MockOrder.
type woltMockOrderMockRecorder struct {
	mock *woltMockOrder
}

// NewMockOrder creates a new mock instance.
func NewWoltMockOrder(ctrl *gomock.Controller) *woltMockOrder {
	mock := &woltMockOrder{ctrl: ctrl}
	mock.recorder = &woltMockOrderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *woltMockOrder) EXPECT() *woltMockOrderMockRecorder {
	return m.recorder
}

// CancelOrder mocks base method.
func (m *woltMockOrder) CancelOrder(ctx context.Context, order models.OrderNotification) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CancelOrder", ctx, order)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CancelOrder indicates an expected call of CancelOrder.
func (mr *woltMockOrderMockRecorder) CancelOrder(ctx, order interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CancelOrder", reflect.TypeOf((*woltMockOrder)(nil).CancelOrder), ctx, order)
}
